//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts1", "RUNTIME_CONFLICT_COLLECTIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictCollection), "CONFLICT_CONFLICTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts4", "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "CONFLICT_CONFLICTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts6", "CONFLICT_RESOLUTION_RULES", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTResolutionRule), "CONFLICT_CONFLICTS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ContentResv1", "CONFLICT_CONFLICTS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict), "CONFLICT_CONTENT_RESV", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictContentReservation), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ContentResv2", "RUNTIME_MIGRATION_ITEMS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationItem), "CONFLICT_CONTENT_RESV", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictContentReservation), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRules1", "CONFLICT_RULE_SCOPES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictRuleScope), "CONFLICT_RESOLUTION_RULES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTResolutionRule))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldExclCollection", "WI_TYPE_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTWorkItemTypeMap), "FIELD_EXCLUSION_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTFieldExclusion), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldMapCollection1", "WI_TYPE_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTWorkItemTypeMap), "FIELD_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTFieldMap))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldMapCollection2", "MAPPINGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMapping), "FIELD_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTFieldMap))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ValueMapCollection2", "FIELD_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTFieldMap), "VALUE_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTValueMap))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupConfigs3", "LINKING_SETTINGS", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkingSetting), "SESSION_GROUP_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupConfig))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ValueMapCollection1", "MAPPINGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMapping), "VALUE_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTValueMap), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_WITypeMapCollection", "MAPPINGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMapping), "WI_TYPE_MAP_COLLECTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTWorkItemTypeMap))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_MigrationSourceConfigs", "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "MIGRATION_SOURCE_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSourceConfig))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfigurations2", "MIGRATION_SOURCE_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSourceConfig), "SESSION_CONFIGURATIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionConfig))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfigurations3", "MIGRATION_SOURCE_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSourceConfig), "SESSION_CONFIGURATIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionConfig))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_MigrationSources1", "PROVIDERS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTProvider), "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeGroups1", "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "RUNTIME_CHANGE_GROUPS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTChangeGroup))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_MigrationItems", "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "RUNTIME_MIGRATION_ITEMS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationItem))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions1", "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "RUNTIME_SESSIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSession))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions2", "MIGRATION_SOURCES", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "RUNTIME_SESSIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSession))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeActions", "RUNTIME_CHANGE_GROUPS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTChangeGroup), "RUNTIME_CHANGE_ACTION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTChangeAction), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs1", "RUNTIME_MIGRATION_ITEMS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationItem), "RUNTIME_ITEM_REVISION_PAIRS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTItemRevisionPair), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs2", "RUNTIME_MIGRATION_ITEMS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationItem), "RUNTIME_ITEM_REVISION_PAIRS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTItemRevisionPair), true)]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionGroupRuns1", "SESSION_GROUP_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupConfig), "RUNTIME_SESSION_GROUP_RUNS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupRun))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionRuns2", "RUNTIME_SESSION_GROUP_RUNS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupRun), "RUNTIME_SESSION_RUNS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionRun))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionRuns1", "SESSION_CONFIGURATIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionConfig), "RUNTIME_SESSION_RUNS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionRun))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions3", "SESSION_GROUPS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroup), "RUNTIME_SESSIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSession))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfiguration5", "SESSION_GROUP_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupConfig), "SESSION_CONFIGURATIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionConfig))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupConfigs1", "SESSION_GROUPS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroup), "SESSION_GROUP_CONFIGS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupConfig))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts51", "RTConflictType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictType), "RTConflict", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRules21", "RTConflictType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictType), "RTResolutionRule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTResolutionRule))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_MigrationSource", "RTMigrationSource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "RTConversionHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConversionHistory))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_ChangeGroup", "RTChangeGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTChangeGroup), "RTConversionHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConversionHistory))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs3", "RTConversionHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConversionHistory), "RTItemRevisionPair", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTItemRevisionPair))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_PerfData_To_SessionGroupRun", "RTSessionGroupRun", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupRun), "RUNTIME_GENERAL_PERFORMANCE_DATA", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTGeneralPerformanceData))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeGroups_to_SessionRun", "RTSessionRun", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionRun), "RTChangeGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTChangeGroup))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupRun_To_ConflictCollection", "RTConflictCollection", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictCollection), "RTSessionGroupRun", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroupRun))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionRun_To_ConflictCollection", "RTConflictCollection", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictCollection), "RTSessionRun", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionRun))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_SessionRun", "RTSessionRun", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionRun), "RTConversionHistory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConversionHistory))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_ChangeAction", "RTChangeAction", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTChangeAction), "RTConflict", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRule_to_ResolutionAction", "CONFLICT_RESOLUTION_ACTIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTResolutionAction), "RTResolutionRule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTResolutionRule))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_ArtifactLink_to_LinkType", "LINK_LINK_TYPE", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkType), "LINK_ARTIFACT_LINK", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTArtifactLink))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkChangeAction_to_ArtifactLink", "LINK_ARTIFACT_LINK", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTArtifactLink), "LINK_LINK_CHANGE_ACTIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkChangeAction))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_GROUPS", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkChangeGroup), "LINK_LINK_CHANGE_ACTIONS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkChangeAction))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkType_to_ArtifactTypeSource", "LINK_ARTIFACT_TYPE", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTArtifactType), "LINK_LINK_TYPE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkType))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkType_to_ArtifactTypeTarget", "LINK_ARTIFACT_TYPE", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTArtifactType), "LINK_LINK_TYPE", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkType))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_LinkChangeAction", "RTLinkChangeAction", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkChangeAction), "RTConflict", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_LinkChangeGroup", "RTLinkChangeGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLinkChangeGroup), "RTConflict", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflict))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_to_provider", "RTProvider", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTProvider), "RTConflictType", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTConflictType))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_action_to_provider", "RTProvider", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTProvider), "RTResolutionAction", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTResolutionAction))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "LATENCY_POLL_FK_MigrationSource_fkey", "RTMigrationSource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "LATENCY_POLL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTLatencyPoll))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_OrchCmd_to_SessionGroup", "RTSessionGroup", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTSessionGroup), "RUNTIME_ORCHESTRATION_COMMAND", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTOrchestrationCommand))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_RelatedRecord_to_MigrationSource", "RTMigrationSource", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTMigrationSource), "RELATED_ARTIFACTS_RECORDS", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTRelatedArtifactsRecords))]
[assembly: EdmRelationshipAttribute("TfsMigrationRuntimeEntityModel", "FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTServerDiffResult), "SERVER_DIFF_RESULT_DETAIL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Microsoft.TeamFoundation.Migration.EntityModel.RTServerDiffResultDetail))]

#endregion

namespace Microsoft.TeamFoundation.Migration.EntityModel
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class RuntimeEntityModel : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new RuntimeEntityModel object using the connection string found in the 'RuntimeEntityModel' section of the application configuration file.
        /// </summary>
        public RuntimeEntityModel() : base("name=RuntimeEntityModel", "RuntimeEntityModel")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RuntimeEntityModel object.
        /// </summary>
        public RuntimeEntityModel(string connectionString) : base(connectionString, "RuntimeEntityModel")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RuntimeEntityModel object.
        /// </summary>
        public RuntimeEntityModel(EntityConnection connection) : base(connection, "RuntimeEntityModel")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTConflictType> RTConflictTypeSet
        {
            get
            {
                if ((_RTConflictTypeSet == null))
                {
                    _RTConflictTypeSet = base.CreateObjectSet<RTConflictType>("RTConflictTypeSet");
                }
                return _RTConflictTypeSet;
            }
        }
        private ObjectSet<RTConflictType> _RTConflictTypeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTConflict> RTConflictSet
        {
            get
            {
                if ((_RTConflictSet == null))
                {
                    _RTConflictSet = base.CreateObjectSet<RTConflict>("RTConflictSet");
                }
                return _RTConflictSet;
            }
        }
        private ObjectSet<RTConflict> _RTConflictSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTConflictContentReservation> RTConflictContentReservationSet
        {
            get
            {
                if ((_RTConflictContentReservationSet == null))
                {
                    _RTConflictContentReservationSet = base.CreateObjectSet<RTConflictContentReservation>("RTConflictContentReservationSet");
                }
                return _RTConflictContentReservationSet;
            }
        }
        private ObjectSet<RTConflictContentReservation> _RTConflictContentReservationSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTResolutionRule> RTResolutionRuleSet
        {
            get
            {
                if ((_RTResolutionRuleSet == null))
                {
                    _RTResolutionRuleSet = base.CreateObjectSet<RTResolutionRule>("RTResolutionRuleSet");
                }
                return _RTResolutionRuleSet;
            }
        }
        private ObjectSet<RTResolutionRule> _RTResolutionRuleSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTConflictRuleScope> RTConflictRuleScopeSet
        {
            get
            {
                if ((_RTConflictRuleScopeSet == null))
                {
                    _RTConflictRuleScopeSet = base.CreateObjectSet<RTConflictRuleScope>("RTConflictRuleScopeSet");
                }
                return _RTConflictRuleScopeSet;
            }
        }
        private ObjectSet<RTConflictRuleScope> _RTConflictRuleScopeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTFieldExclusion> RTFieldExclusionSet
        {
            get
            {
                if ((_RTFieldExclusionSet == null))
                {
                    _RTFieldExclusionSet = base.CreateObjectSet<RTFieldExclusion>("RTFieldExclusionSet");
                }
                return _RTFieldExclusionSet;
            }
        }
        private ObjectSet<RTFieldExclusion> _RTFieldExclusionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTFieldMap> RTFieldMapSet
        {
            get
            {
                if ((_RTFieldMapSet == null))
                {
                    _RTFieldMapSet = base.CreateObjectSet<RTFieldMap>("RTFieldMapSet");
                }
                return _RTFieldMapSet;
            }
        }
        private ObjectSet<RTFieldMap> _RTFieldMapSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLinkingSetting> RTLinkingSettingSet
        {
            get
            {
                if ((_RTLinkingSettingSet == null))
                {
                    _RTLinkingSettingSet = base.CreateObjectSet<RTLinkingSetting>("RTLinkingSettingSet");
                }
                return _RTLinkingSettingSet;
            }
        }
        private ObjectSet<RTLinkingSetting> _RTLinkingSettingSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTMapping> RTMappingSet
        {
            get
            {
                if ((_RTMappingSet == null))
                {
                    _RTMappingSet = base.CreateObjectSet<RTMapping>("RTMappingSet");
                }
                return _RTMappingSet;
            }
        }
        private ObjectSet<RTMapping> _RTMappingSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTMigrationSourceConfig> RTMigrationSourceConfigSet
        {
            get
            {
                if ((_RTMigrationSourceConfigSet == null))
                {
                    _RTMigrationSourceConfigSet = base.CreateObjectSet<RTMigrationSourceConfig>("RTMigrationSourceConfigSet");
                }
                return _RTMigrationSourceConfigSet;
            }
        }
        private ObjectSet<RTMigrationSourceConfig> _RTMigrationSourceConfigSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTMigrationSource> RTMigrationSourceSet
        {
            get
            {
                if ((_RTMigrationSourceSet == null))
                {
                    _RTMigrationSourceSet = base.CreateObjectSet<RTMigrationSource>("RTMigrationSourceSet");
                }
                return _RTMigrationSourceSet;
            }
        }
        private ObjectSet<RTMigrationSource> _RTMigrationSourceSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTProvider> RTProviderSet
        {
            get
            {
                if ((_RTProviderSet == null))
                {
                    _RTProviderSet = base.CreateObjectSet<RTProvider>("RTProviderSet");
                }
                return _RTProviderSet;
            }
        }
        private ObjectSet<RTProvider> _RTProviderSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTChangeAction> RTChangeActionSet
        {
            get
            {
                if ((_RTChangeActionSet == null))
                {
                    _RTChangeActionSet = base.CreateObjectSet<RTChangeAction>("RTChangeActionSet");
                }
                return _RTChangeActionSet;
            }
        }
        private ObjectSet<RTChangeAction> _RTChangeActionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTChangeGroup> RTChangeGroupSet
        {
            get
            {
                if ((_RTChangeGroupSet == null))
                {
                    _RTChangeGroupSet = base.CreateObjectSet<RTChangeGroup>("RTChangeGroupSet");
                }
                return _RTChangeGroupSet;
            }
        }
        private ObjectSet<RTChangeGroup> _RTChangeGroupSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTConflictCollection> RTConflictCollectionSet
        {
            get
            {
                if ((_RTConflictCollectionSet == null))
                {
                    _RTConflictCollectionSet = base.CreateObjectSet<RTConflictCollection>("RTConflictCollectionSet");
                }
                return _RTConflictCollectionSet;
            }
        }
        private ObjectSet<RTConflictCollection> _RTConflictCollectionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTItemRevisionPair> RTItemRevisionPairSet
        {
            get
            {
                if ((_RTItemRevisionPairSet == null))
                {
                    _RTItemRevisionPairSet = base.CreateObjectSet<RTItemRevisionPair>("RTItemRevisionPairSet");
                }
                return _RTItemRevisionPairSet;
            }
        }
        private ObjectSet<RTItemRevisionPair> _RTItemRevisionPairSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTMigrationItem> RTMigrationItemSet
        {
            get
            {
                if ((_RTMigrationItemSet == null))
                {
                    _RTMigrationItemSet = base.CreateObjectSet<RTMigrationItem>("RTMigrationItemSet");
                }
                return _RTMigrationItemSet;
            }
        }
        private ObjectSet<RTMigrationItem> _RTMigrationItemSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTRegisteredAction> RTRegisteredActionSet
        {
            get
            {
                if ((_RTRegisteredActionSet == null))
                {
                    _RTRegisteredActionSet = base.CreateObjectSet<RTRegisteredAction>("RTRegisteredActionSet");
                }
                return _RTRegisteredActionSet;
            }
        }
        private ObjectSet<RTRegisteredAction> _RTRegisteredActionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSessionGroupRun> RTSessionGroupRunSet
        {
            get
            {
                if ((_RTSessionGroupRunSet == null))
                {
                    _RTSessionGroupRunSet = base.CreateObjectSet<RTSessionGroupRun>("RTSessionGroupRunSet");
                }
                return _RTSessionGroupRunSet;
            }
        }
        private ObjectSet<RTSessionGroupRun> _RTSessionGroupRunSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSessionRun> RTSessionRunSet
        {
            get
            {
                if ((_RTSessionRunSet == null))
                {
                    _RTSessionRunSet = base.CreateObjectSet<RTSessionRun>("RTSessionRunSet");
                }
                return _RTSessionRunSet;
            }
        }
        private ObjectSet<RTSessionRun> _RTSessionRunSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSession> RTSessionSet
        {
            get
            {
                if ((_RTSessionSet == null))
                {
                    _RTSessionSet = base.CreateObjectSet<RTSession>("RTSessionSet");
                }
                return _RTSessionSet;
            }
        }
        private ObjectSet<RTSession> _RTSessionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSessionConfig> RTSessionConfigSet
        {
            get
            {
                if ((_RTSessionConfigSet == null))
                {
                    _RTSessionConfigSet = base.CreateObjectSet<RTSessionConfig>("RTSessionConfigSet");
                }
                return _RTSessionConfigSet;
            }
        }
        private ObjectSet<RTSessionConfig> _RTSessionConfigSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSessionGroupConfig> RTSessionGroupConfigSet
        {
            get
            {
                if ((_RTSessionGroupConfigSet == null))
                {
                    _RTSessionGroupConfigSet = base.CreateObjectSet<RTSessionGroupConfig>("RTSessionGroupConfigSet");
                }
                return _RTSessionGroupConfigSet;
            }
        }
        private ObjectSet<RTSessionGroupConfig> _RTSessionGroupConfigSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSessionGroup> RTSessionGroupSet
        {
            get
            {
                if ((_RTSessionGroupSet == null))
                {
                    _RTSessionGroupSet = base.CreateObjectSet<RTSessionGroup>("RTSessionGroupSet");
                }
                return _RTSessionGroupSet;
            }
        }
        private ObjectSet<RTSessionGroup> _RTSessionGroupSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTValueMap> RTValueMapSet
        {
            get
            {
                if ((_RTValueMapSet == null))
                {
                    _RTValueMapSet = base.CreateObjectSet<RTValueMap>("RTValueMapSet");
                }
                return _RTValueMapSet;
            }
        }
        private ObjectSet<RTValueMap> _RTValueMapSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTWorkItemTypeMap> RTWorkItemTypeMapSet
        {
            get
            {
                if ((_RTWorkItemTypeMapSet == null))
                {
                    _RTWorkItemTypeMapSet = base.CreateObjectSet<RTWorkItemTypeMap>("RTWorkItemTypeMapSet");
                }
                return _RTWorkItemTypeMapSet;
            }
        }
        private ObjectSet<RTWorkItemTypeMap> _RTWorkItemTypeMapSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTConversionHistory> RTConversionHistorySet
        {
            get
            {
                if ((_RTConversionHistorySet == null))
                {
                    _RTConversionHistorySet = base.CreateObjectSet<RTConversionHistory>("RTConversionHistorySet");
                }
                return _RTConversionHistorySet;
            }
        }
        private ObjectSet<RTConversionHistory> _RTConversionHistorySet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTGeneralPerformanceData> RTGeneralPerformanceDataSet
        {
            get
            {
                if ((_RTGeneralPerformanceDataSet == null))
                {
                    _RTGeneralPerformanceDataSet = base.CreateObjectSet<RTGeneralPerformanceData>("RTGeneralPerformanceDataSet");
                }
                return _RTGeneralPerformanceDataSet;
            }
        }
        private ObjectSet<RTGeneralPerformanceData> _RTGeneralPerformanceDataSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTResolutionAction> RTResolutionActionSet
        {
            get
            {
                if ((_RTResolutionActionSet == null))
                {
                    _RTResolutionActionSet = base.CreateObjectSet<RTResolutionAction>("RTResolutionActionSet");
                }
                return _RTResolutionActionSet;
            }
        }
        private ObjectSet<RTResolutionAction> _RTResolutionActionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTHighWaterMark> RTHighWaterMarkSet
        {
            get
            {
                if ((_RTHighWaterMarkSet == null))
                {
                    _RTHighWaterMarkSet = base.CreateObjectSet<RTHighWaterMark>("RTHighWaterMarkSet");
                }
                return _RTHighWaterMarkSet;
            }
        }
        private ObjectSet<RTHighWaterMark> _RTHighWaterMarkSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTArtifactLink> RTArtifactLinkSet
        {
            get
            {
                if ((_RTArtifactLinkSet == null))
                {
                    _RTArtifactLinkSet = base.CreateObjectSet<RTArtifactLink>("RTArtifactLinkSet");
                }
                return _RTArtifactLinkSet;
            }
        }
        private ObjectSet<RTArtifactLink> _RTArtifactLinkSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTArtifactType> RTArtifactTypeSet
        {
            get
            {
                if ((_RTArtifactTypeSet == null))
                {
                    _RTArtifactTypeSet = base.CreateObjectSet<RTArtifactType>("RTArtifactTypeSet");
                }
                return _RTArtifactTypeSet;
            }
        }
        private ObjectSet<RTArtifactType> _RTArtifactTypeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLinkChangeAction> RTLinkChangeActionSet
        {
            get
            {
                if ((_RTLinkChangeActionSet == null))
                {
                    _RTLinkChangeActionSet = base.CreateObjectSet<RTLinkChangeAction>("RTLinkChangeActionSet");
                }
                return _RTLinkChangeActionSet;
            }
        }
        private ObjectSet<RTLinkChangeAction> _RTLinkChangeActionSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLinkChangeGroup> RTLinkChangeGroupSet
        {
            get
            {
                if ((_RTLinkChangeGroupSet == null))
                {
                    _RTLinkChangeGroupSet = base.CreateObjectSet<RTLinkChangeGroup>("RTLinkChangeGroupSet");
                }
                return _RTLinkChangeGroupSet;
            }
        }
        private ObjectSet<RTLinkChangeGroup> _RTLinkChangeGroupSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLinkType> RTLinkTypeSet
        {
            get
            {
                if ((_RTLinkTypeSet == null))
                {
                    _RTLinkTypeSet = base.CreateObjectSet<RTLinkType>("RTLinkTypeSet");
                }
                return _RTLinkTypeSet;
            }
        }
        private ObjectSet<RTLinkType> _RTLinkTypeSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<VCContentConflictResult> VCContentConflictResultSet
        {
            get
            {
                if ((_VCContentConflictResultSet == null))
                {
                    _VCContentConflictResultSet = base.CreateObjectSet<VCContentConflictResult>("VCContentConflictResultSet");
                }
                return _VCContentConflictResultSet;
            }
        }
        private ObjectSet<VCContentConflictResult> _VCContentConflictResultSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLastProcessedItemVersions> RTLastProcessedItemVersionsSet
        {
            get
            {
                if ((_RTLastProcessedItemVersionsSet == null))
                {
                    _RTLastProcessedItemVersionsSet = base.CreateObjectSet<RTLastProcessedItemVersions>("RTLastProcessedItemVersionsSet");
                }
                return _RTLastProcessedItemVersionsSet;
            }
        }
        private ObjectSet<RTLastProcessedItemVersions> _RTLastProcessedItemVersionsSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLastProcessedItemVersionsAsofChangeGroupId> RTLastProcessedItemVersionsAsofChangeGroupIdSet
        {
            get
            {
                if ((_RTLastProcessedItemVersionsAsofChangeGroupIdSet == null))
                {
                    _RTLastProcessedItemVersionsAsofChangeGroupIdSet = base.CreateObjectSet<RTLastProcessedItemVersionsAsofChangeGroupId>("RTLastProcessedItemVersionsAsofChangeGroupIdSet");
                }
                return _RTLastProcessedItemVersionsAsofChangeGroupIdSet;
            }
        }
        private ObjectSet<RTLastProcessedItemVersionsAsofChangeGroupId> _RTLastProcessedItemVersionsAsofChangeGroupIdSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTLatencyPoll> RTLatencyPollSet
        {
            get
            {
                if ((_RTLatencyPollSet == null))
                {
                    _RTLatencyPollSet = base.CreateObjectSet<RTLatencyPoll>("RTLatencyPollSet");
                }
                return _RTLatencyPollSet;
            }
        }
        private ObjectSet<RTLatencyPoll> _RTLatencyPollSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTOrchestrationCommand> RTOrchestrationCommandSet
        {
            get
            {
                if ((_RTOrchestrationCommandSet == null))
                {
                    _RTOrchestrationCommandSet = base.CreateObjectSet<RTOrchestrationCommand>("RTOrchestrationCommandSet");
                }
                return _RTOrchestrationCommandSet;
            }
        }
        private ObjectSet<RTOrchestrationCommand> _RTOrchestrationCommandSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTSyncPoint> RTSyncPointSet
        {
            get
            {
                if ((_RTSyncPointSet == null))
                {
                    _RTSyncPointSet = base.CreateObjectSet<RTSyncPoint>("RTSyncPointSet");
                }
                return _RTSyncPointSet;
            }
        }
        private ObjectSet<RTSyncPoint> _RTSyncPointSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTRelatedArtifactsRecords> RTRelatedArtifactsRecordsSet
        {
            get
            {
                if ((_RTRelatedArtifactsRecordsSet == null))
                {
                    _RTRelatedArtifactsRecordsSet = base.CreateObjectSet<RTRelatedArtifactsRecords>("RTRelatedArtifactsRecordsSet");
                }
                return _RTRelatedArtifactsRecordsSet;
            }
        }
        private ObjectSet<RTRelatedArtifactsRecords> _RTRelatedArtifactsRecordsSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTServerDiffResult> RTServerDiffResultSet
        {
            get
            {
                if ((_RTServerDiffResultSet == null))
                {
                    _RTServerDiffResultSet = base.CreateObjectSet<RTServerDiffResult>("RTServerDiffResultSet");
                }
                return _RTServerDiffResultSet;
            }
        }
        private ObjectSet<RTServerDiffResult> _RTServerDiffResultSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RTServerDiffResultDetail> RTServerDiffResultDetailSet
        {
            get
            {
                if ((_RTServerDiffResultDetailSet == null))
                {
                    _RTServerDiffResultDetailSet = base.CreateObjectSet<RTServerDiffResultDetail>("RTServerDiffResultDetailSet");
                }
                return _RTServerDiffResultDetailSet;
            }
        }
        private ObjectSet<RTServerDiffResultDetail> _RTServerDiffResultDetailSet;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTConflictTypeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTConflictTypeSet(RTConflictType rTConflictType)
        {
            base.AddObject("RTConflictTypeSet", rTConflictType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTConflictSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTConflictSet(RTConflict rTConflict)
        {
            base.AddObject("RTConflictSet", rTConflict);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTConflictContentReservationSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTConflictContentReservationSet(RTConflictContentReservation rTConflictContentReservation)
        {
            base.AddObject("RTConflictContentReservationSet", rTConflictContentReservation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTResolutionRuleSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTResolutionRuleSet(RTResolutionRule rTResolutionRule)
        {
            base.AddObject("RTResolutionRuleSet", rTResolutionRule);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTConflictRuleScopeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTConflictRuleScopeSet(RTConflictRuleScope rTConflictRuleScope)
        {
            base.AddObject("RTConflictRuleScopeSet", rTConflictRuleScope);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTFieldExclusionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTFieldExclusionSet(RTFieldExclusion rTFieldExclusion)
        {
            base.AddObject("RTFieldExclusionSet", rTFieldExclusion);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTFieldMapSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTFieldMapSet(RTFieldMap rTFieldMap)
        {
            base.AddObject("RTFieldMapSet", rTFieldMap);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLinkingSettingSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLinkingSettingSet(RTLinkingSetting rTLinkingSetting)
        {
            base.AddObject("RTLinkingSettingSet", rTLinkingSetting);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTMappingSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTMappingSet(RTMapping rTMapping)
        {
            base.AddObject("RTMappingSet", rTMapping);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTMigrationSourceConfigSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTMigrationSourceConfigSet(RTMigrationSourceConfig rTMigrationSourceConfig)
        {
            base.AddObject("RTMigrationSourceConfigSet", rTMigrationSourceConfig);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTMigrationSourceSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTMigrationSourceSet(RTMigrationSource rTMigrationSource)
        {
            base.AddObject("RTMigrationSourceSet", rTMigrationSource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTProviderSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTProviderSet(RTProvider rTProvider)
        {
            base.AddObject("RTProviderSet", rTProvider);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTChangeActionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTChangeActionSet(RTChangeAction rTChangeAction)
        {
            base.AddObject("RTChangeActionSet", rTChangeAction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTChangeGroupSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTChangeGroupSet(RTChangeGroup rTChangeGroup)
        {
            base.AddObject("RTChangeGroupSet", rTChangeGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTConflictCollectionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTConflictCollectionSet(RTConflictCollection rTConflictCollection)
        {
            base.AddObject("RTConflictCollectionSet", rTConflictCollection);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTItemRevisionPairSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTItemRevisionPairSet(RTItemRevisionPair rTItemRevisionPair)
        {
            base.AddObject("RTItemRevisionPairSet", rTItemRevisionPair);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTMigrationItemSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTMigrationItemSet(RTMigrationItem rTMigrationItem)
        {
            base.AddObject("RTMigrationItemSet", rTMigrationItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTRegisteredActionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTRegisteredActionSet(RTRegisteredAction rTRegisteredAction)
        {
            base.AddObject("RTRegisteredActionSet", rTRegisteredAction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSessionGroupRunSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSessionGroupRunSet(RTSessionGroupRun rTSessionGroupRun)
        {
            base.AddObject("RTSessionGroupRunSet", rTSessionGroupRun);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSessionRunSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSessionRunSet(RTSessionRun rTSessionRun)
        {
            base.AddObject("RTSessionRunSet", rTSessionRun);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSessionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSessionSet(RTSession rTSession)
        {
            base.AddObject("RTSessionSet", rTSession);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSessionConfigSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSessionConfigSet(RTSessionConfig rTSessionConfig)
        {
            base.AddObject("RTSessionConfigSet", rTSessionConfig);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSessionGroupConfigSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSessionGroupConfigSet(RTSessionGroupConfig rTSessionGroupConfig)
        {
            base.AddObject("RTSessionGroupConfigSet", rTSessionGroupConfig);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSessionGroupSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSessionGroupSet(RTSessionGroup rTSessionGroup)
        {
            base.AddObject("RTSessionGroupSet", rTSessionGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTValueMapSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTValueMapSet(RTValueMap rTValueMap)
        {
            base.AddObject("RTValueMapSet", rTValueMap);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTWorkItemTypeMapSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTWorkItemTypeMapSet(RTWorkItemTypeMap rTWorkItemTypeMap)
        {
            base.AddObject("RTWorkItemTypeMapSet", rTWorkItemTypeMap);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTConversionHistorySet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTConversionHistorySet(RTConversionHistory rTConversionHistory)
        {
            base.AddObject("RTConversionHistorySet", rTConversionHistory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTGeneralPerformanceDataSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTGeneralPerformanceDataSet(RTGeneralPerformanceData rTGeneralPerformanceData)
        {
            base.AddObject("RTGeneralPerformanceDataSet", rTGeneralPerformanceData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTResolutionActionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTResolutionActionSet(RTResolutionAction rTResolutionAction)
        {
            base.AddObject("RTResolutionActionSet", rTResolutionAction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTHighWaterMarkSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTHighWaterMarkSet(RTHighWaterMark rTHighWaterMark)
        {
            base.AddObject("RTHighWaterMarkSet", rTHighWaterMark);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTArtifactLinkSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTArtifactLinkSet(RTArtifactLink rTArtifactLink)
        {
            base.AddObject("RTArtifactLinkSet", rTArtifactLink);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTArtifactTypeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTArtifactTypeSet(RTArtifactType rTArtifactType)
        {
            base.AddObject("RTArtifactTypeSet", rTArtifactType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLinkChangeActionSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLinkChangeActionSet(RTLinkChangeAction rTLinkChangeAction)
        {
            base.AddObject("RTLinkChangeActionSet", rTLinkChangeAction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLinkChangeGroupSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLinkChangeGroupSet(RTLinkChangeGroup rTLinkChangeGroup)
        {
            base.AddObject("RTLinkChangeGroupSet", rTLinkChangeGroup);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLinkTypeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLinkTypeSet(RTLinkType rTLinkType)
        {
            base.AddObject("RTLinkTypeSet", rTLinkType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the VCContentConflictResultSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVCContentConflictResultSet(VCContentConflictResult vCContentConflictResult)
        {
            base.AddObject("VCContentConflictResultSet", vCContentConflictResult);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLastProcessedItemVersionsSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLastProcessedItemVersionsSet(RTLastProcessedItemVersions rTLastProcessedItemVersions)
        {
            base.AddObject("RTLastProcessedItemVersionsSet", rTLastProcessedItemVersions);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLastProcessedItemVersionsAsofChangeGroupIdSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLastProcessedItemVersionsAsofChangeGroupIdSet(RTLastProcessedItemVersionsAsofChangeGroupId rTLastProcessedItemVersionsAsofChangeGroupId)
        {
            base.AddObject("RTLastProcessedItemVersionsAsofChangeGroupIdSet", rTLastProcessedItemVersionsAsofChangeGroupId);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTLatencyPollSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTLatencyPollSet(RTLatencyPoll rTLatencyPoll)
        {
            base.AddObject("RTLatencyPollSet", rTLatencyPoll);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTOrchestrationCommandSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTOrchestrationCommandSet(RTOrchestrationCommand rTOrchestrationCommand)
        {
            base.AddObject("RTOrchestrationCommandSet", rTOrchestrationCommand);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTSyncPointSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTSyncPointSet(RTSyncPoint rTSyncPoint)
        {
            base.AddObject("RTSyncPointSet", rTSyncPoint);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTRelatedArtifactsRecordsSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTRelatedArtifactsRecordsSet(RTRelatedArtifactsRecords rTRelatedArtifactsRecords)
        {
            base.AddObject("RTRelatedArtifactsRecordsSet", rTRelatedArtifactsRecords);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTServerDiffResultSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTServerDiffResultSet(RTServerDiffResult rTServerDiffResult)
        {
            base.AddObject("RTServerDiffResultSet", rTServerDiffResult);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RTServerDiffResultDetailSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRTServerDiffResultDetailSet(RTServerDiffResultDetail rTServerDiffResultDetail)
        {
            base.AddObject("RTServerDiffResultDetailSet", rTServerDiffResultDetail);
        }

        #endregion

        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> PromoteDeltaToPending(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("PromoteDeltaToPending", sessionUniqueIdParameter, sourceUniqueIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> PromoteDeltaToPending(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("PromoteDeltaToPending", mergeOption, sessionUniqueIdParameter, sourceUniqueIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTMigrationSource> LoadMigrationSources(Nullable<global::System.Guid> sourceUniqueId)
        {
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTMigrationSource>("LoadMigrationSources", sourceUniqueIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTMigrationSource> LoadMigrationSources(Nullable<global::System.Guid> sourceUniqueId, MergeOption mergeOption)
        {
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTMigrationSource>("LoadMigrationSources", mergeOption, sourceUniqueIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="changeGroupID">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeAction> LoadChangeAction(Nullable<global::System.Int64> changeGroupID)
        {
            ObjectParameter changeGroupIDParameter;
            if (changeGroupID.HasValue)
            {
                changeGroupIDParameter = new ObjectParameter("ChangeGroupID", changeGroupID);
            }
            else
            {
                changeGroupIDParameter = new ObjectParameter("ChangeGroupID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<RTChangeAction>("LoadChangeAction", changeGroupIDParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="changeGroupID">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeAction> LoadChangeAction(Nullable<global::System.Int64> changeGroupID, MergeOption mergeOption)
        {
            ObjectParameter changeGroupIDParameter;
            if (changeGroupID.HasValue)
            {
                changeGroupIDParameter = new ObjectParameter("ChangeGroupID", changeGroupID);
            }
            else
            {
                changeGroupIDParameter = new ObjectParameter("ChangeGroupID", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<RTChangeAction>("LoadChangeAction", mergeOption, changeGroupIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> UpdateChangeGroupStatus(Nullable<global::System.Int32> id, Nullable<global::System.Int32> newStatus)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("UpdateChangeGroupStatus", idParameter, newStatusParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> UpdateChangeGroupStatus(Nullable<global::System.Int32> id, Nullable<global::System.Int32> newStatus, MergeOption mergeOption)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("UpdateChangeGroupStatus", mergeOption, idParameter, newStatusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="currentStatus">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> PromoteChangeGroups(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int32> currentStatus, Nullable<global::System.Int32> newStatus)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter currentStatusParameter;
            if (currentStatus.HasValue)
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", currentStatus);
            }
            else
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("PromoteChangeGroups", sessionUniqueIdParameter, sourceUniqueIdParameter, currentStatusParameter, newStatusParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="currentStatus">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> PromoteChangeGroups(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int32> currentStatus, Nullable<global::System.Int32> newStatus, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter currentStatusParameter;
            if (currentStatus.HasValue)
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", currentStatus);
            }
            else
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("PromoteChangeGroups", mergeOption, sessionUniqueIdParameter, sourceUniqueIdParameter, currentStatusParameter, newStatusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="otherSideChangeId">No Metadata Documentation available.</param>
        public ObjectResult<RTConversionHistory> QueryConversionHistory(Nullable<global::System.Guid> sessionId, Nullable<global::System.Guid> sourceUniqueId, global::System.String otherSideChangeId)
        {
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter otherSideChangeIdParameter;
            if (otherSideChangeId != null)
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", otherSideChangeId);
            }
            else
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<RTConversionHistory>("QueryConversionHistory", sessionIdParameter, sourceUniqueIdParameter, otherSideChangeIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="otherSideChangeId">No Metadata Documentation available.</param>
        public ObjectResult<RTConversionHistory> QueryConversionHistory(Nullable<global::System.Guid> sessionId, Nullable<global::System.Guid> sourceUniqueId, global::System.String otherSideChangeId, MergeOption mergeOption)
        {
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter otherSideChangeIdParameter;
            if (otherSideChangeId != null)
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", otherSideChangeId);
            }
            else
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<RTConversionHistory>("QueryConversionHistory", mergeOption, sessionIdParameter, sourceUniqueIdParameter, otherSideChangeIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="containsBackloggedAction">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> NextChangeGroup(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int32> status, Nullable<global::System.Boolean> containsBackloggedAction)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter statusParameter;
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(global::System.Int32));
            }
    
            ObjectParameter containsBackloggedActionParameter;
            if (containsBackloggedAction.HasValue)
            {
                containsBackloggedActionParameter = new ObjectParameter("ContainsBackloggedAction", containsBackloggedAction);
            }
            else
            {
                containsBackloggedActionParameter = new ObjectParameter("ContainsBackloggedAction", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("NextChangeGroup", sessionUniqueIdParameter, sourceUniqueIdParameter, statusParameter, containsBackloggedActionParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="status">No Metadata Documentation available.</param>
        /// <param name="containsBackloggedAction">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> NextChangeGroup(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int32> status, Nullable<global::System.Boolean> containsBackloggedAction, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter statusParameter;
            if (status.HasValue)
            {
                statusParameter = new ObjectParameter("Status", status);
            }
            else
            {
                statusParameter = new ObjectParameter("Status", typeof(global::System.Int32));
            }
    
            ObjectParameter containsBackloggedActionParameter;
            if (containsBackloggedAction.HasValue)
            {
                containsBackloggedActionParameter = new ObjectParameter("ContainsBackloggedAction", containsBackloggedAction);
            }
            else
            {
                containsBackloggedActionParameter = new ObjectParameter("ContainsBackloggedAction", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("NextChangeGroup", mergeOption, sessionUniqueIdParameter, sourceUniqueIdParameter, statusParameter, containsBackloggedActionParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="deltaTableExecutionOrder">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> ResetChangeGroupsAfterResolve(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int64> deltaTableExecutionOrder)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter deltaTableExecutionOrderParameter;
            if (deltaTableExecutionOrder.HasValue)
            {
                deltaTableExecutionOrderParameter = new ObjectParameter("DeltaTableExecutionOrder", deltaTableExecutionOrder);
            }
            else
            {
                deltaTableExecutionOrderParameter = new ObjectParameter("DeltaTableExecutionOrder", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("ResetChangeGroupsAfterResolve", sessionUniqueIdParameter, sourceUniqueIdParameter, deltaTableExecutionOrderParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="deltaTableExecutionOrder">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> ResetChangeGroupsAfterResolve(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int64> deltaTableExecutionOrder, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter deltaTableExecutionOrderParameter;
            if (deltaTableExecutionOrder.HasValue)
            {
                deltaTableExecutionOrderParameter = new ObjectParameter("DeltaTableExecutionOrder", deltaTableExecutionOrder);
            }
            else
            {
                deltaTableExecutionOrderParameter = new ObjectParameter("DeltaTableExecutionOrder", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("ResetChangeGroupsAfterResolve", mergeOption, sessionUniqueIdParameter, sourceUniqueIdParameter, deltaTableExecutionOrderParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionRunId">No Metadata Documentation available.</param>
        /// <param name="sourceMigrationId">No Metadata Documentation available.</param>
        /// <param name="otherSideMigrationId">No Metadata Documentation available.</param>
        /// <param name="sourceChangeGroupId">No Metadata Documentation available.</param>
        /// <param name="sourceChangeId">No Metadata Documentation available.</param>
        /// <param name="sourceChangeVersion">No Metadata Documentation available.</param>
        /// <param name="otherSideChangeId">No Metadata Documentation available.</param>
        /// <param name="otherSideChangeVersion">No Metadata Documentation available.</param>
        /// <param name="executionOrder">No Metadata Documentation available.</param>
        /// <param name="utcWhen">No Metadata Documentation available.</param>
        /// <param name="comment">No Metadata Documentation available.</param>
        public ObjectResult<RTConversionHistory> UpdateConversionHistoryInResolve(Nullable<global::System.Int32> sessionRunId, Nullable<global::System.Int32> sourceMigrationId, Nullable<global::System.Int32> otherSideMigrationId, Nullable<global::System.Int64> sourceChangeGroupId, global::System.String sourceChangeId, global::System.String sourceChangeVersion, global::System.String otherSideChangeId, global::System.String otherSideChangeVersion, Nullable<global::System.Int64> executionOrder, Nullable<global::System.DateTime> utcWhen, global::System.String comment)
        {
            ObjectParameter sessionRunIdParameter;
            if (sessionRunId.HasValue)
            {
                sessionRunIdParameter = new ObjectParameter("SessionRunId", sessionRunId);
            }
            else
            {
                sessionRunIdParameter = new ObjectParameter("SessionRunId", typeof(global::System.Int32));
            }
    
            ObjectParameter sourceMigrationIdParameter;
            if (sourceMigrationId.HasValue)
            {
                sourceMigrationIdParameter = new ObjectParameter("SourceMigrationId", sourceMigrationId);
            }
            else
            {
                sourceMigrationIdParameter = new ObjectParameter("SourceMigrationId", typeof(global::System.Int32));
            }
    
            ObjectParameter otherSideMigrationIdParameter;
            if (otherSideMigrationId.HasValue)
            {
                otherSideMigrationIdParameter = new ObjectParameter("OtherSideMigrationId", otherSideMigrationId);
            }
            else
            {
                otherSideMigrationIdParameter = new ObjectParameter("OtherSideMigrationId", typeof(global::System.Int32));
            }
    
            ObjectParameter sourceChangeGroupIdParameter;
            if (sourceChangeGroupId.HasValue)
            {
                sourceChangeGroupIdParameter = new ObjectParameter("SourceChangeGroupId", sourceChangeGroupId);
            }
            else
            {
                sourceChangeGroupIdParameter = new ObjectParameter("SourceChangeGroupId", typeof(global::System.Int64));
            }
    
            ObjectParameter sourceChangeIdParameter;
            if (sourceChangeId != null)
            {
                sourceChangeIdParameter = new ObjectParameter("SourceChangeId", sourceChangeId);
            }
            else
            {
                sourceChangeIdParameter = new ObjectParameter("SourceChangeId", typeof(global::System.String));
            }
    
            ObjectParameter sourceChangeVersionParameter;
            if (sourceChangeVersion != null)
            {
                sourceChangeVersionParameter = new ObjectParameter("SourceChangeVersion", sourceChangeVersion);
            }
            else
            {
                sourceChangeVersionParameter = new ObjectParameter("SourceChangeVersion", typeof(global::System.String));
            }
    
            ObjectParameter otherSideChangeIdParameter;
            if (otherSideChangeId != null)
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", otherSideChangeId);
            }
            else
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", typeof(global::System.String));
            }
    
            ObjectParameter otherSideChangeVersionParameter;
            if (otherSideChangeVersion != null)
            {
                otherSideChangeVersionParameter = new ObjectParameter("OtherSideChangeVersion", otherSideChangeVersion);
            }
            else
            {
                otherSideChangeVersionParameter = new ObjectParameter("OtherSideChangeVersion", typeof(global::System.String));
            }
    
            ObjectParameter executionOrderParameter;
            if (executionOrder.HasValue)
            {
                executionOrderParameter = new ObjectParameter("ExecutionOrder", executionOrder);
            }
            else
            {
                executionOrderParameter = new ObjectParameter("ExecutionOrder", typeof(global::System.Int64));
            }
    
            ObjectParameter utcWhenParameter;
            if (utcWhen.HasValue)
            {
                utcWhenParameter = new ObjectParameter("UtcWhen", utcWhen);
            }
            else
            {
                utcWhenParameter = new ObjectParameter("UtcWhen", typeof(global::System.DateTime));
            }
    
            ObjectParameter commentParameter;
            if (comment != null)
            {
                commentParameter = new ObjectParameter("Comment", comment);
            }
            else
            {
                commentParameter = new ObjectParameter("Comment", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<RTConversionHistory>("UpdateConversionHistoryInResolve", sessionRunIdParameter, sourceMigrationIdParameter, otherSideMigrationIdParameter, sourceChangeGroupIdParameter, sourceChangeIdParameter, sourceChangeVersionParameter, otherSideChangeIdParameter, otherSideChangeVersionParameter, executionOrderParameter, utcWhenParameter, commentParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionRunId">No Metadata Documentation available.</param>
        /// <param name="sourceMigrationId">No Metadata Documentation available.</param>
        /// <param name="otherSideMigrationId">No Metadata Documentation available.</param>
        /// <param name="sourceChangeGroupId">No Metadata Documentation available.</param>
        /// <param name="sourceChangeId">No Metadata Documentation available.</param>
        /// <param name="sourceChangeVersion">No Metadata Documentation available.</param>
        /// <param name="otherSideChangeId">No Metadata Documentation available.</param>
        /// <param name="otherSideChangeVersion">No Metadata Documentation available.</param>
        /// <param name="executionOrder">No Metadata Documentation available.</param>
        /// <param name="utcWhen">No Metadata Documentation available.</param>
        /// <param name="comment">No Metadata Documentation available.</param>
        public ObjectResult<RTConversionHistory> UpdateConversionHistoryInResolve(Nullable<global::System.Int32> sessionRunId, Nullable<global::System.Int32> sourceMigrationId, Nullable<global::System.Int32> otherSideMigrationId, Nullable<global::System.Int64> sourceChangeGroupId, global::System.String sourceChangeId, global::System.String sourceChangeVersion, global::System.String otherSideChangeId, global::System.String otherSideChangeVersion, Nullable<global::System.Int64> executionOrder, Nullable<global::System.DateTime> utcWhen, global::System.String comment, MergeOption mergeOption)
        {
            ObjectParameter sessionRunIdParameter;
            if (sessionRunId.HasValue)
            {
                sessionRunIdParameter = new ObjectParameter("SessionRunId", sessionRunId);
            }
            else
            {
                sessionRunIdParameter = new ObjectParameter("SessionRunId", typeof(global::System.Int32));
            }
    
            ObjectParameter sourceMigrationIdParameter;
            if (sourceMigrationId.HasValue)
            {
                sourceMigrationIdParameter = new ObjectParameter("SourceMigrationId", sourceMigrationId);
            }
            else
            {
                sourceMigrationIdParameter = new ObjectParameter("SourceMigrationId", typeof(global::System.Int32));
            }
    
            ObjectParameter otherSideMigrationIdParameter;
            if (otherSideMigrationId.HasValue)
            {
                otherSideMigrationIdParameter = new ObjectParameter("OtherSideMigrationId", otherSideMigrationId);
            }
            else
            {
                otherSideMigrationIdParameter = new ObjectParameter("OtherSideMigrationId", typeof(global::System.Int32));
            }
    
            ObjectParameter sourceChangeGroupIdParameter;
            if (sourceChangeGroupId.HasValue)
            {
                sourceChangeGroupIdParameter = new ObjectParameter("SourceChangeGroupId", sourceChangeGroupId);
            }
            else
            {
                sourceChangeGroupIdParameter = new ObjectParameter("SourceChangeGroupId", typeof(global::System.Int64));
            }
    
            ObjectParameter sourceChangeIdParameter;
            if (sourceChangeId != null)
            {
                sourceChangeIdParameter = new ObjectParameter("SourceChangeId", sourceChangeId);
            }
            else
            {
                sourceChangeIdParameter = new ObjectParameter("SourceChangeId", typeof(global::System.String));
            }
    
            ObjectParameter sourceChangeVersionParameter;
            if (sourceChangeVersion != null)
            {
                sourceChangeVersionParameter = new ObjectParameter("SourceChangeVersion", sourceChangeVersion);
            }
            else
            {
                sourceChangeVersionParameter = new ObjectParameter("SourceChangeVersion", typeof(global::System.String));
            }
    
            ObjectParameter otherSideChangeIdParameter;
            if (otherSideChangeId != null)
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", otherSideChangeId);
            }
            else
            {
                otherSideChangeIdParameter = new ObjectParameter("OtherSideChangeId", typeof(global::System.String));
            }
    
            ObjectParameter otherSideChangeVersionParameter;
            if (otherSideChangeVersion != null)
            {
                otherSideChangeVersionParameter = new ObjectParameter("OtherSideChangeVersion", otherSideChangeVersion);
            }
            else
            {
                otherSideChangeVersionParameter = new ObjectParameter("OtherSideChangeVersion", typeof(global::System.String));
            }
    
            ObjectParameter executionOrderParameter;
            if (executionOrder.HasValue)
            {
                executionOrderParameter = new ObjectParameter("ExecutionOrder", executionOrder);
            }
            else
            {
                executionOrderParameter = new ObjectParameter("ExecutionOrder", typeof(global::System.Int64));
            }
    
            ObjectParameter utcWhenParameter;
            if (utcWhen.HasValue)
            {
                utcWhenParameter = new ObjectParameter("UtcWhen", utcWhen);
            }
            else
            {
                utcWhenParameter = new ObjectParameter("UtcWhen", typeof(global::System.DateTime));
            }
    
            ObjectParameter commentParameter;
            if (comment != null)
            {
                commentParameter = new ObjectParameter("Comment", comment);
            }
            else
            {
                commentParameter = new ObjectParameter("Comment", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<RTConversionHistory>("UpdateConversionHistoryInResolve", mergeOption, sessionRunIdParameter, sourceMigrationIdParameter, otherSideMigrationIdParameter, sourceChangeGroupIdParameter, sourceChangeIdParameter, sourceChangeVersionParameter, otherSideChangeIdParameter, otherSideChangeVersionParameter, executionOrderParameter, utcWhenParameter, commentParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionGroupId">No Metadata Documentation available.</param>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        /// <param name="sourceId">No Metadata Documentation available.</param>
        /// <param name="containsConflictedAction">No Metadata Documentation available.</param>
        /// <param name="currentStatus">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeGroup> BatchUpdateLinkChangeGroupStatus(Nullable<global::System.Guid> sessionGroupId, Nullable<global::System.Guid> sessionId, Nullable<global::System.Guid> sourceId, Nullable<global::System.Boolean> containsConflictedAction, Nullable<global::System.Int32> currentStatus, Nullable<global::System.Int32> newStatus)
        {
            ObjectParameter sessionGroupIdParameter;
            if (sessionGroupId.HasValue)
            {
                sessionGroupIdParameter = new ObjectParameter("SessionGroupId", sessionGroupId);
            }
            else
            {
                sessionGroupIdParameter = new ObjectParameter("SessionGroupId", typeof(global::System.Guid));
            }
    
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceIdParameter;
            if (sourceId.HasValue)
            {
                sourceIdParameter = new ObjectParameter("SourceId", sourceId);
            }
            else
            {
                sourceIdParameter = new ObjectParameter("SourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter containsConflictedActionParameter;
            if (containsConflictedAction.HasValue)
            {
                containsConflictedActionParameter = new ObjectParameter("ContainsConflictedAction", containsConflictedAction);
            }
            else
            {
                containsConflictedActionParameter = new ObjectParameter("ContainsConflictedAction", typeof(global::System.Boolean));
            }
    
            ObjectParameter currentStatusParameter;
            if (currentStatus.HasValue)
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", currentStatus);
            }
            else
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTLinkChangeGroup>("BatchUpdateLinkChangeGroupStatus", sessionGroupIdParameter, sessionIdParameter, sourceIdParameter, containsConflictedActionParameter, currentStatusParameter, newStatusParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionGroupId">No Metadata Documentation available.</param>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        /// <param name="sourceId">No Metadata Documentation available.</param>
        /// <param name="containsConflictedAction">No Metadata Documentation available.</param>
        /// <param name="currentStatus">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeGroup> BatchUpdateLinkChangeGroupStatus(Nullable<global::System.Guid> sessionGroupId, Nullable<global::System.Guid> sessionId, Nullable<global::System.Guid> sourceId, Nullable<global::System.Boolean> containsConflictedAction, Nullable<global::System.Int32> currentStatus, Nullable<global::System.Int32> newStatus, MergeOption mergeOption)
        {
            ObjectParameter sessionGroupIdParameter;
            if (sessionGroupId.HasValue)
            {
                sessionGroupIdParameter = new ObjectParameter("SessionGroupId", sessionGroupId);
            }
            else
            {
                sessionGroupIdParameter = new ObjectParameter("SessionGroupId", typeof(global::System.Guid));
            }
    
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceIdParameter;
            if (sourceId.HasValue)
            {
                sourceIdParameter = new ObjectParameter("SourceId", sourceId);
            }
            else
            {
                sourceIdParameter = new ObjectParameter("SourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter containsConflictedActionParameter;
            if (containsConflictedAction.HasValue)
            {
                containsConflictedActionParameter = new ObjectParameter("ContainsConflictedAction", containsConflictedAction);
            }
            else
            {
                containsConflictedActionParameter = new ObjectParameter("ContainsConflictedAction", typeof(global::System.Boolean));
            }
    
            ObjectParameter currentStatusParameter;
            if (currentStatus.HasValue)
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", currentStatus);
            }
            else
            {
                currentStatusParameter = new ObjectParameter("CurrentStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTLinkChangeGroup>("BatchUpdateLinkChangeGroupStatus", mergeOption, sessionGroupIdParameter, sessionIdParameter, sourceIdParameter, containsConflictedActionParameter, currentStatusParameter, newStatusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="currStatus">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> BatchUpdateChangeGroupsStatus(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int32> currStatus, Nullable<global::System.Int32> newStatus)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter currStatusParameter;
            if (currStatus.HasValue)
            {
                currStatusParameter = new ObjectParameter("CurrStatus", currStatus);
            }
            else
            {
                currStatusParameter = new ObjectParameter("CurrStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("BatchUpdateChangeGroupsStatus", sessionUniqueIdParameter, sourceUniqueIdParameter, currStatusParameter, newStatusParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        /// <param name="currStatus">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> BatchUpdateChangeGroupsStatus(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, Nullable<global::System.Int32> currStatus, Nullable<global::System.Int32> newStatus, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter currStatusParameter;
            if (currStatus.HasValue)
            {
                currStatusParameter = new ObjectParameter("CurrStatus", currStatus);
            }
            else
            {
                currStatusParameter = new ObjectParameter("CurrStatus", typeof(global::System.Int32));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("BatchUpdateChangeGroupsStatus", mergeOption, sessionUniqueIdParameter, sourceUniqueIdParameter, currStatusParameter, newStatusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> DeleteIncompeleteChangeGroups(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("DeleteIncompeleteChangeGroups", sessionUniqueIdParameter, sourceUniqueIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTChangeGroup> DeleteIncompeleteChangeGroups(Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceUniqueId, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceUniqueIdParameter;
            if (sourceUniqueId.HasValue)
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", sourceUniqueId);
            }
            else
            {
                sourceUniqueIdParameter = new ObjectParameter("SourceUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTChangeGroup>("DeleteIncompeleteChangeGroups", mergeOption, sessionUniqueIdParameter, sourceUniqueIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sourceArtifactId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactUri">No Metadata Documentation available.</param>
        /// <param name="targetArtifactUri">No Metadata Documentation available.</param>
        /// <param name="comment">No Metadata Documentation available.</param>
        /// <param name="linkTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="linkTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="extendedLinkProperty">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactContentType">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactContentType">No Metadata Documentation available.</param>
        /// <param name="createOnMissing">No Metadata Documentation available.</param>
        public ObjectResult<RTArtifactLink> FindArtifactLink(global::System.String sourceArtifactId, global::System.String sourceArtifactUri, global::System.String targetArtifactUri, global::System.String comment, global::System.String linkTypeReferenceName, global::System.String linkTypeDisplayName, global::System.String extendedLinkProperty, global::System.String sourceArtifactTypeReferenceName, global::System.String sourceArtifactTypeDisplayName, global::System.String sourceArtifactContentType, global::System.String targetArtifactTypeReferenceName, global::System.String targetArtifactTypeDisplayName, global::System.String targetArtifactContentType, Nullable<global::System.Boolean> createOnMissing)
        {
            ObjectParameter sourceArtifactIdParameter;
            if (sourceArtifactId != null)
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", sourceArtifactId);
            }
            else
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactUriParameter;
            if (sourceArtifactUri != null)
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", sourceArtifactUri);
            }
            else
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactUriParameter;
            if (targetArtifactUri != null)
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", targetArtifactUri);
            }
            else
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter commentParameter;
            if (comment != null)
            {
                commentParameter = new ObjectParameter("Comment", comment);
            }
            else
            {
                commentParameter = new ObjectParameter("Comment", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeReferenceNameParameter;
            if (linkTypeReferenceName != null)
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", linkTypeReferenceName);
            }
            else
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeDisplayNameParameter;
            if (linkTypeDisplayName != null)
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", linkTypeDisplayName);
            }
            else
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter extendedLinkPropertyParameter;
            if (extendedLinkProperty != null)
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", extendedLinkProperty);
            }
            else
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeReferenceNameParameter;
            if (sourceArtifactTypeReferenceName != null)
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", sourceArtifactTypeReferenceName);
            }
            else
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeDisplayNameParameter;
            if (sourceArtifactTypeDisplayName != null)
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", sourceArtifactTypeDisplayName);
            }
            else
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactContentTypeParameter;
            if (sourceArtifactContentType != null)
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", sourceArtifactContentType);
            }
            else
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeReferenceNameParameter;
            if (targetArtifactTypeReferenceName != null)
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", targetArtifactTypeReferenceName);
            }
            else
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeDisplayNameParameter;
            if (targetArtifactTypeDisplayName != null)
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", targetArtifactTypeDisplayName);
            }
            else
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactContentTypeParameter;
            if (targetArtifactContentType != null)
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", targetArtifactContentType);
            }
            else
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", typeof(global::System.String));
            }
    
            ObjectParameter createOnMissingParameter;
            if (createOnMissing.HasValue)
            {
                createOnMissingParameter = new ObjectParameter("CreateOnMissing", createOnMissing);
            }
            else
            {
                createOnMissingParameter = new ObjectParameter("CreateOnMissing", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<RTArtifactLink>("FindArtifactLink", sourceArtifactIdParameter, sourceArtifactUriParameter, targetArtifactUriParameter, commentParameter, linkTypeReferenceNameParameter, linkTypeDisplayNameParameter, extendedLinkPropertyParameter, sourceArtifactTypeReferenceNameParameter, sourceArtifactTypeDisplayNameParameter, sourceArtifactContentTypeParameter, targetArtifactTypeReferenceNameParameter, targetArtifactTypeDisplayNameParameter, targetArtifactContentTypeParameter, createOnMissingParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sourceArtifactId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactUri">No Metadata Documentation available.</param>
        /// <param name="targetArtifactUri">No Metadata Documentation available.</param>
        /// <param name="comment">No Metadata Documentation available.</param>
        /// <param name="linkTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="linkTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="extendedLinkProperty">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactContentType">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactContentType">No Metadata Documentation available.</param>
        /// <param name="createOnMissing">No Metadata Documentation available.</param>
        public ObjectResult<RTArtifactLink> FindArtifactLink(global::System.String sourceArtifactId, global::System.String sourceArtifactUri, global::System.String targetArtifactUri, global::System.String comment, global::System.String linkTypeReferenceName, global::System.String linkTypeDisplayName, global::System.String extendedLinkProperty, global::System.String sourceArtifactTypeReferenceName, global::System.String sourceArtifactTypeDisplayName, global::System.String sourceArtifactContentType, global::System.String targetArtifactTypeReferenceName, global::System.String targetArtifactTypeDisplayName, global::System.String targetArtifactContentType, Nullable<global::System.Boolean> createOnMissing, MergeOption mergeOption)
        {
            ObjectParameter sourceArtifactIdParameter;
            if (sourceArtifactId != null)
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", sourceArtifactId);
            }
            else
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactUriParameter;
            if (sourceArtifactUri != null)
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", sourceArtifactUri);
            }
            else
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactUriParameter;
            if (targetArtifactUri != null)
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", targetArtifactUri);
            }
            else
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter commentParameter;
            if (comment != null)
            {
                commentParameter = new ObjectParameter("Comment", comment);
            }
            else
            {
                commentParameter = new ObjectParameter("Comment", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeReferenceNameParameter;
            if (linkTypeReferenceName != null)
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", linkTypeReferenceName);
            }
            else
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeDisplayNameParameter;
            if (linkTypeDisplayName != null)
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", linkTypeDisplayName);
            }
            else
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter extendedLinkPropertyParameter;
            if (extendedLinkProperty != null)
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", extendedLinkProperty);
            }
            else
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeReferenceNameParameter;
            if (sourceArtifactTypeReferenceName != null)
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", sourceArtifactTypeReferenceName);
            }
            else
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeDisplayNameParameter;
            if (sourceArtifactTypeDisplayName != null)
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", sourceArtifactTypeDisplayName);
            }
            else
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactContentTypeParameter;
            if (sourceArtifactContentType != null)
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", sourceArtifactContentType);
            }
            else
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeReferenceNameParameter;
            if (targetArtifactTypeReferenceName != null)
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", targetArtifactTypeReferenceName);
            }
            else
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeDisplayNameParameter;
            if (targetArtifactTypeDisplayName != null)
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", targetArtifactTypeDisplayName);
            }
            else
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactContentTypeParameter;
            if (targetArtifactContentType != null)
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", targetArtifactContentType);
            }
            else
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", typeof(global::System.String));
            }
    
            ObjectParameter createOnMissingParameter;
            if (createOnMissing.HasValue)
            {
                createOnMissingParameter = new ObjectParameter("CreateOnMissing", createOnMissing);
            }
            else
            {
                createOnMissingParameter = new ObjectParameter("CreateOnMissing", typeof(global::System.Boolean));
            }
    
            return base.ExecuteFunction<RTArtifactLink>("FindArtifactLink", mergeOption, sourceArtifactIdParameter, sourceArtifactUriParameter, targetArtifactUriParameter, commentParameter, linkTypeReferenceNameParameter, linkTypeDisplayNameParameter, extendedLinkPropertyParameter, sourceArtifactTypeReferenceNameParameter, sourceArtifactTypeDisplayNameParameter, sourceArtifactContentTypeParameter, targetArtifactTypeReferenceNameParameter, targetArtifactTypeDisplayNameParameter, targetArtifactContentTypeParameter, createOnMissingParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionGroupUniqueId">No Metadata Documentation available.</param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceID">No Metadata Documentation available.</param>
        /// <param name="actionId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactUri">No Metadata Documentation available.</param>
        /// <param name="targetArtifactUri">No Metadata Documentation available.</param>
        /// <param name="comment">No Metadata Documentation available.</param>
        /// <param name="linkTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="linkTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="extendedLinkProperty">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactContentType">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactContentType">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeAction> FindLinkChangeActionInDelta(Nullable<global::System.Guid> sessionGroupUniqueId, Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceID, Nullable<global::System.Guid> actionId, global::System.String sourceArtifactId, global::System.String sourceArtifactUri, global::System.String targetArtifactUri, global::System.String comment, global::System.String linkTypeReferenceName, global::System.String linkTypeDisplayName, global::System.String extendedLinkProperty, global::System.String sourceArtifactTypeReferenceName, global::System.String sourceArtifactTypeDisplayName, global::System.String sourceArtifactContentType, global::System.String targetArtifactTypeReferenceName, global::System.String targetArtifactTypeDisplayName, global::System.String targetArtifactContentType)
        {
            ObjectParameter sessionGroupUniqueIdParameter;
            if (sessionGroupUniqueId.HasValue)
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", sessionGroupUniqueId);
            }
            else
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceIDParameter;
            if (sourceID.HasValue)
            {
                sourceIDParameter = new ObjectParameter("SourceID", sourceID);
            }
            else
            {
                sourceIDParameter = new ObjectParameter("SourceID", typeof(global::System.Guid));
            }
    
            ObjectParameter actionIdParameter;
            if (actionId.HasValue)
            {
                actionIdParameter = new ObjectParameter("ActionId", actionId);
            }
            else
            {
                actionIdParameter = new ObjectParameter("ActionId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceArtifactIdParameter;
            if (sourceArtifactId != null)
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", sourceArtifactId);
            }
            else
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactUriParameter;
            if (sourceArtifactUri != null)
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", sourceArtifactUri);
            }
            else
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactUriParameter;
            if (targetArtifactUri != null)
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", targetArtifactUri);
            }
            else
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter commentParameter;
            if (comment != null)
            {
                commentParameter = new ObjectParameter("Comment", comment);
            }
            else
            {
                commentParameter = new ObjectParameter("Comment", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeReferenceNameParameter;
            if (linkTypeReferenceName != null)
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", linkTypeReferenceName);
            }
            else
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeDisplayNameParameter;
            if (linkTypeDisplayName != null)
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", linkTypeDisplayName);
            }
            else
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter extendedLinkPropertyParameter;
            if (extendedLinkProperty != null)
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", extendedLinkProperty);
            }
            else
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeReferenceNameParameter;
            if (sourceArtifactTypeReferenceName != null)
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", sourceArtifactTypeReferenceName);
            }
            else
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeDisplayNameParameter;
            if (sourceArtifactTypeDisplayName != null)
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", sourceArtifactTypeDisplayName);
            }
            else
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactContentTypeParameter;
            if (sourceArtifactContentType != null)
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", sourceArtifactContentType);
            }
            else
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeReferenceNameParameter;
            if (targetArtifactTypeReferenceName != null)
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", targetArtifactTypeReferenceName);
            }
            else
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeDisplayNameParameter;
            if (targetArtifactTypeDisplayName != null)
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", targetArtifactTypeDisplayName);
            }
            else
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactContentTypeParameter;
            if (targetArtifactContentType != null)
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", targetArtifactContentType);
            }
            else
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<RTLinkChangeAction>("FindLinkChangeActionInDelta", sessionGroupUniqueIdParameter, sessionUniqueIdParameter, sourceIDParameter, actionIdParameter, sourceArtifactIdParameter, sourceArtifactUriParameter, targetArtifactUriParameter, commentParameter, linkTypeReferenceNameParameter, linkTypeDisplayNameParameter, extendedLinkPropertyParameter, sourceArtifactTypeReferenceNameParameter, sourceArtifactTypeDisplayNameParameter, sourceArtifactContentTypeParameter, targetArtifactTypeReferenceNameParameter, targetArtifactTypeDisplayNameParameter, targetArtifactContentTypeParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionGroupUniqueId">No Metadata Documentation available.</param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        /// <param name="sourceID">No Metadata Documentation available.</param>
        /// <param name="actionId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactId">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactUri">No Metadata Documentation available.</param>
        /// <param name="targetArtifactUri">No Metadata Documentation available.</param>
        /// <param name="comment">No Metadata Documentation available.</param>
        /// <param name="linkTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="linkTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="extendedLinkProperty">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="sourceArtifactContentType">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeReferenceName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactTypeDisplayName">No Metadata Documentation available.</param>
        /// <param name="targetArtifactContentType">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeAction> FindLinkChangeActionInDelta(Nullable<global::System.Guid> sessionGroupUniqueId, Nullable<global::System.Guid> sessionUniqueId, Nullable<global::System.Guid> sourceID, Nullable<global::System.Guid> actionId, global::System.String sourceArtifactId, global::System.String sourceArtifactUri, global::System.String targetArtifactUri, global::System.String comment, global::System.String linkTypeReferenceName, global::System.String linkTypeDisplayName, global::System.String extendedLinkProperty, global::System.String sourceArtifactTypeReferenceName, global::System.String sourceArtifactTypeDisplayName, global::System.String sourceArtifactContentType, global::System.String targetArtifactTypeReferenceName, global::System.String targetArtifactTypeDisplayName, global::System.String targetArtifactContentType, MergeOption mergeOption)
        {
            ObjectParameter sessionGroupUniqueIdParameter;
            if (sessionGroupUniqueId.HasValue)
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", sessionGroupUniqueId);
            }
            else
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceIDParameter;
            if (sourceID.HasValue)
            {
                sourceIDParameter = new ObjectParameter("SourceID", sourceID);
            }
            else
            {
                sourceIDParameter = new ObjectParameter("SourceID", typeof(global::System.Guid));
            }
    
            ObjectParameter actionIdParameter;
            if (actionId.HasValue)
            {
                actionIdParameter = new ObjectParameter("ActionId", actionId);
            }
            else
            {
                actionIdParameter = new ObjectParameter("ActionId", typeof(global::System.Guid));
            }
    
            ObjectParameter sourceArtifactIdParameter;
            if (sourceArtifactId != null)
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", sourceArtifactId);
            }
            else
            {
                sourceArtifactIdParameter = new ObjectParameter("SourceArtifactId", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactUriParameter;
            if (sourceArtifactUri != null)
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", sourceArtifactUri);
            }
            else
            {
                sourceArtifactUriParameter = new ObjectParameter("SourceArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactUriParameter;
            if (targetArtifactUri != null)
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", targetArtifactUri);
            }
            else
            {
                targetArtifactUriParameter = new ObjectParameter("TargetArtifactUri", typeof(global::System.String));
            }
    
            ObjectParameter commentParameter;
            if (comment != null)
            {
                commentParameter = new ObjectParameter("Comment", comment);
            }
            else
            {
                commentParameter = new ObjectParameter("Comment", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeReferenceNameParameter;
            if (linkTypeReferenceName != null)
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", linkTypeReferenceName);
            }
            else
            {
                linkTypeReferenceNameParameter = new ObjectParameter("LinkTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter linkTypeDisplayNameParameter;
            if (linkTypeDisplayName != null)
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", linkTypeDisplayName);
            }
            else
            {
                linkTypeDisplayNameParameter = new ObjectParameter("LinkTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter extendedLinkPropertyParameter;
            if (extendedLinkProperty != null)
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", extendedLinkProperty);
            }
            else
            {
                extendedLinkPropertyParameter = new ObjectParameter("ExtendedLinkProperty", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeReferenceNameParameter;
            if (sourceArtifactTypeReferenceName != null)
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", sourceArtifactTypeReferenceName);
            }
            else
            {
                sourceArtifactTypeReferenceNameParameter = new ObjectParameter("SourceArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactTypeDisplayNameParameter;
            if (sourceArtifactTypeDisplayName != null)
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", sourceArtifactTypeDisplayName);
            }
            else
            {
                sourceArtifactTypeDisplayNameParameter = new ObjectParameter("SourceArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter sourceArtifactContentTypeParameter;
            if (sourceArtifactContentType != null)
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", sourceArtifactContentType);
            }
            else
            {
                sourceArtifactContentTypeParameter = new ObjectParameter("SourceArtifactContentType", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeReferenceNameParameter;
            if (targetArtifactTypeReferenceName != null)
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", targetArtifactTypeReferenceName);
            }
            else
            {
                targetArtifactTypeReferenceNameParameter = new ObjectParameter("TargetArtifactTypeReferenceName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactTypeDisplayNameParameter;
            if (targetArtifactTypeDisplayName != null)
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", targetArtifactTypeDisplayName);
            }
            else
            {
                targetArtifactTypeDisplayNameParameter = new ObjectParameter("TargetArtifactTypeDisplayName", typeof(global::System.String));
            }
    
            ObjectParameter targetArtifactContentTypeParameter;
            if (targetArtifactContentType != null)
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", targetArtifactContentType);
            }
            else
            {
                targetArtifactContentTypeParameter = new ObjectParameter("TargetArtifactContentType", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<RTLinkChangeAction>("FindLinkChangeActionInDelta", mergeOption, sessionGroupUniqueIdParameter, sessionUniqueIdParameter, sourceIDParameter, actionIdParameter, sourceArtifactIdParameter, sourceArtifactUriParameter, targetArtifactUriParameter, commentParameter, linkTypeReferenceNameParameter, linkTypeDisplayNameParameter, extendedLinkPropertyParameter, sourceArtifactTypeReferenceNameParameter, sourceArtifactTypeDisplayNameParameter, sourceArtifactContentTypeParameter, targetArtifactTypeReferenceNameParameter, targetArtifactTypeDisplayNameParameter, targetArtifactContentTypeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="linkChangeActionId">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeAction> ResolveConflictedLinkChangeAction(Nullable<global::System.Int64> linkChangeActionId, Nullable<global::System.Int32> newStatus)
        {
            ObjectParameter linkChangeActionIdParameter;
            if (linkChangeActionId.HasValue)
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", linkChangeActionId);
            }
            else
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", typeof(global::System.Int64));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTLinkChangeAction>("ResolveConflictedLinkChangeAction", linkChangeActionIdParameter, newStatusParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="linkChangeActionId">No Metadata Documentation available.</param>
        /// <param name="newStatus">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeAction> ResolveConflictedLinkChangeAction(Nullable<global::System.Int64> linkChangeActionId, Nullable<global::System.Int32> newStatus, MergeOption mergeOption)
        {
            ObjectParameter linkChangeActionIdParameter;
            if (linkChangeActionId.HasValue)
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", linkChangeActionId);
            }
            else
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", typeof(global::System.Int64));
            }
    
            ObjectParameter newStatusParameter;
            if (newStatus.HasValue)
            {
                newStatusParameter = new ObjectParameter("NewStatus", newStatus);
            }
            else
            {
                newStatusParameter = new ObjectParameter("NewStatus", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<RTLinkChangeAction>("ResolveConflictedLinkChangeAction", mergeOption, linkChangeActionIdParameter, newStatusParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="linkChangeActionId">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeGroup> UnblockNonConflictedLInkChangeGroup(Nullable<global::System.Int64> linkChangeActionId)
        {
            ObjectParameter linkChangeActionIdParameter;
            if (linkChangeActionId.HasValue)
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", linkChangeActionId);
            }
            else
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<RTLinkChangeGroup>("UnblockNonConflictedLInkChangeGroup", linkChangeActionIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="linkChangeActionId">No Metadata Documentation available.</param>
        public ObjectResult<RTLinkChangeGroup> UnblockNonConflictedLInkChangeGroup(Nullable<global::System.Int64> linkChangeActionId, MergeOption mergeOption)
        {
            ObjectParameter linkChangeActionIdParameter;
            if (linkChangeActionId.HasValue)
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", linkChangeActionId);
            }
            else
            {
                linkChangeActionIdParameter = new ObjectParameter("LinkChangeActionId", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction<RTLinkChangeGroup>("UnblockNonConflictedLInkChangeGroup", mergeOption, linkChangeActionIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        public ObjectResult<RTSession> UpdateMigrationSessionStatusToCompleted(Nullable<global::System.Guid> sessionId)
        {
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTSession>("UpdateMigrationSessionStatusToCompleted", sessionIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        public ObjectResult<RTSession> UpdateMigrationSessionStatusToCompleted(Nullable<global::System.Guid> sessionId, MergeOption mergeOption)
        {
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTSession>("UpdateMigrationSessionStatusToCompleted", mergeOption, sessionIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sourceId">No Metadata Documentation available.</param>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        public ObjectResult<VCContentConflictResult> QueryContentConflict(Nullable<global::System.Guid> sourceId, Nullable<global::System.Guid> sessionId)
        {
            ObjectParameter sourceIdParameter;
            if (sourceId.HasValue)
            {
                sourceIdParameter = new ObjectParameter("SourceId", sourceId);
            }
            else
            {
                sourceIdParameter = new ObjectParameter("SourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<VCContentConflictResult>("QueryContentConflict", sourceIdParameter, sessionIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sourceId">No Metadata Documentation available.</param>
        /// <param name="sessionId">No Metadata Documentation available.</param>
        public ObjectResult<VCContentConflictResult> QueryContentConflict(Nullable<global::System.Guid> sourceId, Nullable<global::System.Guid> sessionId, MergeOption mergeOption)
        {
            ObjectParameter sourceIdParameter;
            if (sourceId.HasValue)
            {
                sourceIdParameter = new ObjectParameter("SourceId", sourceId);
            }
            else
            {
                sourceIdParameter = new ObjectParameter("SourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter sessionIdParameter;
            if (sessionId.HasValue)
            {
                sessionIdParameter = new ObjectParameter("SessionId", sessionId);
            }
            else
            {
                sessionIdParameter = new ObjectParameter("SessionId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<VCContentConflictResult>("QueryContentConflict", mergeOption, sourceIdParameter, sessionIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionGroupUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTSessionGroup> DeleteSessionGroupCachedData(Nullable<global::System.Guid> sessionGroupUniqueId)
        {
            ObjectParameter sessionGroupUniqueIdParameter;
            if (sessionGroupUniqueId.HasValue)
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", sessionGroupUniqueId);
            }
            else
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTSessionGroup>("DeleteSessionGroupCachedData", sessionGroupUniqueIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionGroupUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTSessionGroup> DeleteSessionGroupCachedData(Nullable<global::System.Guid> sessionGroupUniqueId, MergeOption mergeOption)
        {
            ObjectParameter sessionGroupUniqueIdParameter;
            if (sessionGroupUniqueId.HasValue)
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", sessionGroupUniqueId);
            }
            else
            {
                sessionGroupUniqueIdParameter = new ObjectParameter("SessionGroupUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTSessionGroup>("DeleteSessionGroupCachedData", mergeOption, sessionGroupUniqueIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTSession> DeleteSessionCachedData(Nullable<global::System.Guid> sessionUniqueId)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTSession>("DeleteSessionCachedData", sessionUniqueIdParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="sessionUniqueId">No Metadata Documentation available.</param>
        public ObjectResult<RTSession> DeleteSessionCachedData(Nullable<global::System.Guid> sessionUniqueId, MergeOption mergeOption)
        {
            ObjectParameter sessionUniqueIdParameter;
            if (sessionUniqueId.HasValue)
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", sessionUniqueId);
            }
            else
            {
                sessionUniqueIdParameter = new ObjectParameter("SessionUniqueId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction<RTSession>("DeleteSessionCachedData", mergeOption, sessionUniqueIdParameter);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTArtifactLink")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTArtifactLink : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTArtifactLink object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sourceArtifactUri">Initial value of the SourceArtifactUri property.</param>
        /// <param name="targetArtifactUri">Initial value of the TargetArtifactUri property.</param>
        public static RTArtifactLink CreateRTArtifactLink(global::System.Int32 id, global::System.String sourceArtifactUri, global::System.String targetArtifactUri)
        {
            RTArtifactLink rTArtifactLink = new RTArtifactLink();
            rTArtifactLink.Id = id;
            rTArtifactLink.SourceArtifactUri = sourceArtifactUri;
            rTArtifactLink.TargetArtifactUri = targetArtifactUri;
            return rTArtifactLink;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SourceArtifactUri
        {
            get
            {
                return _SourceArtifactUri;
            }
            set
            {
                OnSourceArtifactUriChanging(value);
                ReportPropertyChanging("SourceArtifactUri");
                _SourceArtifactUri = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SourceArtifactUri");
                OnSourceArtifactUriChanged();
            }
        }
        private global::System.String _SourceArtifactUri;
        partial void OnSourceArtifactUriChanging(global::System.String value);
        partial void OnSourceArtifactUriChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TargetArtifactUri
        {
            get
            {
                return _TargetArtifactUri;
            }
            set
            {
                OnTargetArtifactUriChanging(value);
                ReportPropertyChanging("TargetArtifactUri");
                _TargetArtifactUri = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TargetArtifactUri");
                OnTargetArtifactUriChanged();
            }
        }
        private global::System.String _TargetArtifactUri;
        partial void OnTargetArtifactUriChanging(global::System.String value);
        partial void OnTargetArtifactUriChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SourceArtifactId
        {
            get
            {
                return _SourceArtifactId;
            }
            set
            {
                OnSourceArtifactIdChanging(value);
                ReportPropertyChanging("SourceArtifactId");
                _SourceArtifactId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SourceArtifactId");
                OnSourceArtifactIdChanged();
            }
        }
        private global::System.String _SourceArtifactId;
        partial void OnSourceArtifactIdChanging(global::System.String value);
        partial void OnSourceArtifactIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsLocked
        {
            get
            {
                return _IsLocked;
            }
            set
            {
                OnIsLockedChanging(value);
                ReportPropertyChanging("IsLocked");
                _IsLocked = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsLocked");
                OnIsLockedChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsLocked;
        partial void OnIsLockedChanging(Nullable<global::System.Boolean> value);
        partial void OnIsLockedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ArtifactLink_to_LinkType", "LINK_LINK_TYPE")]
        public RTLinkType LinkType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_ArtifactLink_to_LinkType", "LINK_LINK_TYPE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_ArtifactLink_to_LinkType", "LINK_LINK_TYPE").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTLinkType> LinkTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_ArtifactLink_to_LinkType", "LINK_LINK_TYPE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_ArtifactLink_to_LinkType", "LINK_LINK_TYPE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkChangeAction_to_ArtifactLink", "LINK_LINK_CHANGE_ACTIONS")]
        public EntityCollection<RTLinkChangeAction> LinkChangeActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_ArtifactLink", "LINK_LINK_CHANGE_ACTIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_ArtifactLink", "LINK_LINK_CHANGE_ACTIONS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTArtifactType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTArtifactType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTArtifactType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="displayName">Initial value of the DisplayName property.</param>
        /// <param name="artifactContentType">Initial value of the ArtifactContentType property.</param>
        public static RTArtifactType CreateRTArtifactType(global::System.Int32 id, global::System.String referenceName, global::System.String displayName, global::System.String artifactContentType)
        {
            RTArtifactType rTArtifactType = new RTArtifactType();
            rTArtifactType.Id = id;
            rTArtifactType.ReferenceName = referenceName;
            rTArtifactType.DisplayName = displayName;
            rTArtifactType.ArtifactContentType = artifactContentType;
            return rTArtifactType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.String _ReferenceName;
        partial void OnReferenceNameChanging(global::System.String value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                OnDisplayNameChanging(value);
                ReportPropertyChanging("DisplayName");
                _DisplayName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DisplayName");
                OnDisplayNameChanged();
            }
        }
        private global::System.String _DisplayName;
        partial void OnDisplayNameChanging(global::System.String value);
        partial void OnDisplayNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ArtifactContentType
        {
            get
            {
                return _ArtifactContentType;
            }
            set
            {
                OnArtifactContentTypeChanging(value);
                ReportPropertyChanging("ArtifactContentType");
                _ArtifactContentType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ArtifactContentType");
                OnArtifactContentTypeChanged();
            }
        }
        private global::System.String _ArtifactContentType;
        partial void OnArtifactContentTypeChanging(global::System.String value);
        partial void OnArtifactContentTypeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkType_to_ArtifactTypeSource", "LINK_LINK_TYPE")]
        public EntityCollection<RTLinkType> AsSourceInLinkTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeSource", "LINK_LINK_TYPE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeSource", "LINK_LINK_TYPE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkType_to_ArtifactTypeTarget", "LINK_LINK_TYPE")]
        public EntityCollection<RTLinkType> AsTargetInLinkTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeTarget", "LINK_LINK_TYPE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTLinkType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeTarget", "LINK_LINK_TYPE", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTChangeAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTChangeAction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTChangeAction object.
        /// </summary>
        /// <param name="changeGroupId">Initial value of the ChangeGroupId property.</param>
        /// <param name="changeActionId">Initial value of the ChangeActionId property.</param>
        /// <param name="recursivity">Initial value of the Recursivity property.</param>
        /// <param name="isSubstituted">Initial value of the IsSubstituted property.</param>
        /// <param name="analysisPhase">Initial value of the AnalysisPhase property.</param>
        /// <param name="actionId">Initial value of the ActionId property.</param>
        /// <param name="sourceItem">Initial value of the SourceItem property.</param>
        /// <param name="toPath">Initial value of the ToPath property.</param>
        /// <param name="backlogged">Initial value of the Backlogged property.</param>
        /// <param name="itemTypeReferenceName">Initial value of the ItemTypeReferenceName property.</param>
        public static RTChangeAction CreateRTChangeAction(global::System.Int64 changeGroupId, global::System.Int64 changeActionId, global::System.Boolean recursivity, global::System.Boolean isSubstituted, global::System.Int32 analysisPhase, global::System.Guid actionId, global::System.String sourceItem, global::System.String toPath, global::System.Boolean backlogged, global::System.String itemTypeReferenceName)
        {
            RTChangeAction rTChangeAction = new RTChangeAction();
            rTChangeAction.ChangeGroupId = changeGroupId;
            rTChangeAction.ChangeActionId = changeActionId;
            rTChangeAction.Recursivity = recursivity;
            rTChangeAction.IsSubstituted = isSubstituted;
            rTChangeAction.AnalysisPhase = analysisPhase;
            rTChangeAction.ActionId = actionId;
            rTChangeAction.SourceItem = sourceItem;
            rTChangeAction.ToPath = toPath;
            rTChangeAction.Backlogged = backlogged;
            rTChangeAction.ItemTypeReferenceName = itemTypeReferenceName;
            return rTChangeAction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ChangeGroupId
        {
            get
            {
                return _ChangeGroupId;
            }
            set
            {
                if (_ChangeGroupId != value)
                {
                    OnChangeGroupIdChanging(value);
                    ReportPropertyChanging("ChangeGroupId");
                    _ChangeGroupId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ChangeGroupId");
                    OnChangeGroupIdChanged();
                }
            }
        }
        private global::System.Int64 _ChangeGroupId;
        partial void OnChangeGroupIdChanging(global::System.Int64 value);
        partial void OnChangeGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ChangeActionId
        {
            get
            {
                return _ChangeActionId;
            }
            set
            {
                if (_ChangeActionId != value)
                {
                    OnChangeActionIdChanging(value);
                    ReportPropertyChanging("ChangeActionId");
                    _ChangeActionId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ChangeActionId");
                    OnChangeActionIdChanged();
                }
            }
        }
        private global::System.Int64 _ChangeActionId;
        partial void OnChangeActionIdChanging(global::System.Int64 value);
        partial void OnChangeActionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Recursivity
        {
            get
            {
                return _Recursivity;
            }
            set
            {
                OnRecursivityChanging(value);
                ReportPropertyChanging("Recursivity");
                _Recursivity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Recursivity");
                OnRecursivityChanged();
            }
        }
        private global::System.Boolean _Recursivity;
        partial void OnRecursivityChanging(global::System.Boolean value);
        partial void OnRecursivityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ExecutionOrder
        {
            get
            {
                return _ExecutionOrder;
            }
            set
            {
                OnExecutionOrderChanging(value);
                ReportPropertyChanging("ExecutionOrder");
                _ExecutionOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecutionOrder");
                OnExecutionOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _ExecutionOrder;
        partial void OnExecutionOrderChanging(Nullable<global::System.Int32> value);
        partial void OnExecutionOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsSubstituted
        {
            get
            {
                return _IsSubstituted;
            }
            set
            {
                OnIsSubstitutedChanging(value);
                ReportPropertyChanging("IsSubstituted");
                _IsSubstituted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsSubstituted");
                OnIsSubstitutedChanged();
            }
        }
        private global::System.Boolean _IsSubstituted;
        partial void OnIsSubstitutedChanging(global::System.Boolean value);
        partial void OnIsSubstitutedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Label
        {
            get
            {
                return _Label;
            }
            set
            {
                OnLabelChanging(value);
                ReportPropertyChanging("Label");
                _Label = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Label");
                OnLabelChanged();
            }
        }
        private global::System.String _Label;
        partial void OnLabelChanging(global::System.String value);
        partial void OnLabelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ActionData
        {
            get
            {
                return _ActionData;
            }
            set
            {
                OnActionDataChanging(value);
                ReportPropertyChanging("ActionData");
                _ActionData = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ActionData");
                OnActionDataChanged();
            }
        }
        private global::System.String _ActionData;
        partial void OnActionDataChanging(global::System.String value);
        partial void OnActionDataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ActionComment
        {
            get
            {
                return _ActionComment;
            }
            set
            {
                OnActionCommentChanging(value);
                ReportPropertyChanging("ActionComment");
                _ActionComment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ActionComment");
                OnActionCommentChanged();
            }
        }
        private global::System.String _ActionComment;
        partial void OnActionCommentChanging(global::System.String value);
        partial void OnActionCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _StartTime;
        partial void OnStartTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AnalysisPhase
        {
            get
            {
                return _AnalysisPhase;
            }
            set
            {
                OnAnalysisPhaseChanging(value);
                ReportPropertyChanging("AnalysisPhase");
                _AnalysisPhase = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AnalysisPhase");
                OnAnalysisPhaseChanged();
            }
        }
        private global::System.Int32 _AnalysisPhase;
        partial void OnAnalysisPhaseChanging(global::System.Int32 value);
        partial void OnAnalysisPhaseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ActionId
        {
            get
            {
                return _ActionId;
            }
            set
            {
                OnActionIdChanging(value);
                ReportPropertyChanging("ActionId");
                _ActionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActionId");
                OnActionIdChanged();
            }
        }
        private global::System.Guid _ActionId;
        partial void OnActionIdChanging(global::System.Guid value);
        partial void OnActionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SourceItem
        {
            get
            {
                return _SourceItem;
            }
            set
            {
                OnSourceItemChanging(value);
                ReportPropertyChanging("SourceItem");
                _SourceItem = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SourceItem");
                OnSourceItemChanged();
            }
        }
        private global::System.String _SourceItem;
        partial void OnSourceItemChanging(global::System.String value);
        partial void OnSourceItemChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FromPath
        {
            get
            {
                return _FromPath;
            }
            set
            {
                OnFromPathChanging(value);
                ReportPropertyChanging("FromPath");
                _FromPath = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FromPath");
                OnFromPathChanged();
            }
        }
        private global::System.String _FromPath;
        partial void OnFromPathChanging(global::System.String value);
        partial void OnFromPathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ToPath
        {
            get
            {
                return _ToPath;
            }
            set
            {
                OnToPathChanging(value);
                ReportPropertyChanging("ToPath");
                _ToPath = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ToPath");
                OnToPathChanged();
            }
        }
        private global::System.String _ToPath;
        partial void OnToPathChanging(global::System.String value);
        partial void OnToPathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Version
        {
            get
            {
                return _Version;
            }
            set
            {
                OnVersionChanging(value);
                ReportPropertyChanging("Version");
                _Version = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Version");
                OnVersionChanged();
            }
        }
        private global::System.String _Version;
        partial void OnVersionChanging(global::System.String value);
        partial void OnVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> FinishTime
        {
            get
            {
                return _FinishTime;
            }
            set
            {
                OnFinishTimeChanging(value);
                ReportPropertyChanging("FinishTime");
                _FinishTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FinishTime");
                OnFinishTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _FinishTime;
        partial void OnFinishTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnFinishTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Backlogged
        {
            get
            {
                return _Backlogged;
            }
            set
            {
                OnBackloggedChanging(value);
                ReportPropertyChanging("Backlogged");
                _Backlogged = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Backlogged");
                OnBackloggedChanged();
            }
        }
        private global::System.Boolean _Backlogged;
        partial void OnBackloggedChanging(global::System.Boolean value);
        partial void OnBackloggedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemTypeReferenceName
        {
            get
            {
                return _ItemTypeReferenceName;
            }
            set
            {
                OnItemTypeReferenceNameChanging(value);
                ReportPropertyChanging("ItemTypeReferenceName");
                _ItemTypeReferenceName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ItemTypeReferenceName");
                OnItemTypeReferenceNameChanged();
            }
        }
        private global::System.String _ItemTypeReferenceName;
        partial void OnItemTypeReferenceNameChanging(global::System.String value);
        partial void OnItemTypeReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MergeVersionTo
        {
            get
            {
                return _MergeVersionTo;
            }
            set
            {
                OnMergeVersionToChanging(value);
                ReportPropertyChanging("MergeVersionTo");
                _MergeVersionTo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MergeVersionTo");
                OnMergeVersionToChanged();
            }
        }
        private global::System.String _MergeVersionTo;
        partial void OnMergeVersionToChanging(global::System.String value);
        partial void OnMergeVersionToChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeActions", "RUNTIME_CHANGE_GROUPS")]
        public RTChangeGroup ChangeGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeActions", "RUNTIME_CHANGE_GROUPS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeActions", "RUNTIME_CHANGE_GROUPS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTChangeGroup> ChangeGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeActions", "RUNTIME_CHANGE_GROUPS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeActions", "RUNTIME_CHANGE_GROUPS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_ChangeAction", "RTConflict")]
        public EntityCollection<RTConflict> Conflicts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_ChangeAction", "RTConflict");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_ChangeAction", "RTConflict", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTChangeGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTChangeGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTChangeGroup object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="executionOrder">Initial value of the ExecutionOrder property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="sourceUniqueId">Initial value of the SourceUniqueId property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="containsBackloggedAction">Initial value of the ContainsBackloggedAction property.</param>
        public static RTChangeGroup CreateRTChangeGroup(global::System.Int64 id, global::System.Int64 executionOrder, global::System.Guid sessionUniqueId, global::System.Guid sourceUniqueId, global::System.Int32 status, global::System.Boolean containsBackloggedAction)
        {
            RTChangeGroup rTChangeGroup = new RTChangeGroup();
            rTChangeGroup.Id = id;
            rTChangeGroup.ExecutionOrder = executionOrder;
            rTChangeGroup.SessionUniqueId = sessionUniqueId;
            rTChangeGroup.SourceUniqueId = sourceUniqueId;
            rTChangeGroup.Status = status;
            rTChangeGroup.ContainsBackloggedAction = containsBackloggedAction;
            return rTChangeGroup;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ExecutionOrder
        {
            get
            {
                return _ExecutionOrder;
            }
            set
            {
                OnExecutionOrderChanging(value);
                ReportPropertyChanging("ExecutionOrder");
                _ExecutionOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecutionOrder");
                OnExecutionOrderChanged();
            }
        }
        private global::System.Int64 _ExecutionOrder;
        partial void OnExecutionOrderChanging(global::System.Int64 value);
        partial void OnExecutionOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Owner
        {
            get
            {
                return _Owner;
            }
            set
            {
                OnOwnerChanging(value);
                ReportPropertyChanging("Owner");
                _Owner = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Owner");
                OnOwnerChanged();
            }
        }
        private global::System.String _Owner;
        partial void OnOwnerChanging(global::System.String value);
        partial void OnOwnerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _StartTime;
        partial void OnStartTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceUniqueId
        {
            get
            {
                return _SourceUniqueId;
            }
            set
            {
                OnSourceUniqueIdChanging(value);
                ReportPropertyChanging("SourceUniqueId");
                _SourceUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceUniqueId");
                OnSourceUniqueIdChanged();
            }
        }
        private global::System.Guid _SourceUniqueId;
        partial void OnSourceUniqueIdChanging(global::System.Guid value);
        partial void OnSourceUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> FinishTime
        {
            get
            {
                return _FinishTime;
            }
            set
            {
                OnFinishTimeChanging(value);
                ReportPropertyChanging("FinishTime");
                _FinishTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FinishTime");
                OnFinishTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _FinishTime;
        partial void OnFinishTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnFinishTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean ContainsBackloggedAction
        {
            get
            {
                return _ContainsBackloggedAction;
            }
            set
            {
                OnContainsBackloggedActionChanging(value);
                ReportPropertyChanging("ContainsBackloggedAction");
                _ContainsBackloggedAction = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContainsBackloggedAction");
                OnContainsBackloggedActionChanged();
            }
        }
        private global::System.Boolean _ContainsBackloggedAction;
        partial void OnContainsBackloggedActionChanging(global::System.Boolean value);
        partial void OnContainsBackloggedActionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ReflectedChangeGroupId
        {
            get
            {
                return _ReflectedChangeGroupId;
            }
            set
            {
                OnReflectedChangeGroupIdChanging(value);
                ReportPropertyChanging("ReflectedChangeGroupId");
                _ReflectedChangeGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReflectedChangeGroupId");
                OnReflectedChangeGroupIdChanged();
            }
        }
        private Nullable<global::System.Int64> _ReflectedChangeGroupId;
        partial void OnReflectedChangeGroupIdChanging(Nullable<global::System.Int64> value);
        partial void OnReflectedChangeGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> UsePagedActions
        {
            get
            {
                return _UsePagedActions;
            }
            set
            {
                OnUsePagedActionsChanging(value);
                ReportPropertyChanging("UsePagedActions");
                _UsePagedActions = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UsePagedActions");
                OnUsePagedActionsChanged();
            }
        }
        private Nullable<global::System.Boolean> _UsePagedActions;
        partial void OnUsePagedActionsChanging(Nullable<global::System.Boolean> value);
        partial void OnUsePagedActionsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> RevisionTime
        {
            get
            {
                return _RevisionTime;
            }
            set
            {
                OnRevisionTimeChanging(value);
                ReportPropertyChanging("RevisionTime");
                _RevisionTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RevisionTime");
                OnRevisionTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _RevisionTime;
        partial void OnRevisionTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnRevisionTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeGroups1", "MIGRATION_SOURCES")]
        public RTMigrationSource SourceSideMigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups1", "MIGRATION_SOURCES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups1", "MIGRATION_SOURCES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> SourceSideMigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups1", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups1", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeActions", "RUNTIME_CHANGE_ACTION")]
        public EntityCollection<RTChangeAction> ChangeActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTChangeAction>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeActions", "RUNTIME_CHANGE_ACTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTChangeAction>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeActions", "RUNTIME_CHANGE_ACTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_ChangeGroup", "RTConversionHistory")]
        public EntityCollection<RTConversionHistory> ConversionHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_ChangeGroup", "RTConversionHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_ChangeGroup", "RTConversionHistory", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeGroups_to_SessionRun", "RTSessionRun")]
        public RTSessionRun SessionRun
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups_to_SessionRun", "RTSessionRun").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups_to_SessionRun", "RTSessionRun").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionRun> SessionRunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups_to_SessionRun", "RTSessionRun");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups_to_SessionRun", "RTSessionRun", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTConflict")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTConflict : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTConflict object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="scopeId">Initial value of the ScopeId property.</param>
        public static RTConflict CreateRTConflict(global::System.Int32 id, global::System.Int32 status, global::System.Guid scopeId)
        {
            RTConflict rTConflict = new RTConflict();
            rTConflict.Id = id;
            rTConflict.Status = status;
            rTConflict.ScopeId = scopeId;
            return rTConflict;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ConflictDetails
        {
            get
            {
                return _ConflictDetails;
            }
            set
            {
                OnConflictDetailsChanging(value);
                ReportPropertyChanging("ConflictDetails");
                _ConflictDetails = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ConflictDetails");
                OnConflictDetailsChanged();
            }
        }
        private global::System.String _ConflictDetails;
        partial void OnConflictDetailsChanging(global::System.String value);
        partial void OnConflictDetailsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ScopeHint
        {
            get
            {
                return _ScopeHint;
            }
            set
            {
                OnScopeHintChanging(value);
                ReportPropertyChanging("ScopeHint");
                _ScopeHint = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ScopeHint");
                OnScopeHintChanged();
            }
        }
        private global::System.String _ScopeHint;
        partial void OnScopeHintChanging(global::System.String value);
        partial void OnScopeHintChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ScopeId
        {
            get
            {
                return _ScopeId;
            }
            set
            {
                OnScopeIdChanging(value);
                ReportPropertyChanging("ScopeId");
                _ScopeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ScopeId");
                OnScopeIdChanged();
            }
        }
        private global::System.Guid _ScopeId;
        partial void OnScopeIdChanging(global::System.Guid value);
        partial void OnScopeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreationTime;
        partial void OnCreationTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ConflictCount
        {
            get
            {
                return _ConflictCount;
            }
            set
            {
                OnConflictCountChanging(value);
                ReportPropertyChanging("ConflictCount");
                _ConflictCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ConflictCount");
                OnConflictCountChanged();
            }
        }
        private Nullable<global::System.Int32> _ConflictCount;
        partial void OnConflictCountChanging(Nullable<global::System.Int32> value);
        partial void OnConflictCountChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts1", "RUNTIME_CONFLICT_COLLECTIONS")]
        public RTConflictCollection InCollection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_Conflicts1", "RUNTIME_CONFLICT_COLLECTIONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_Conflicts1", "RUNTIME_CONFLICT_COLLECTIONS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflictCollection> InCollectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_Conflicts1", "RUNTIME_CONFLICT_COLLECTIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_Conflicts1", "RUNTIME_CONFLICT_COLLECTIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts4", "MIGRATION_SOURCES")]
        public RTMigrationSource SourceSideMigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_Conflicts4", "MIGRATION_SOURCES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_Conflicts4", "MIGRATION_SOURCES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> SourceSideMigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_Conflicts4", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_Conflicts4", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts6", "CONFLICT_RESOLUTION_RULES")]
        public RTResolutionRule ResolvedByRule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_Conflicts6", "CONFLICT_RESOLUTION_RULES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_Conflicts6", "CONFLICT_RESOLUTION_RULES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTResolutionRule> ResolvedByRuleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_Conflicts6", "CONFLICT_RESOLUTION_RULES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_Conflicts6", "CONFLICT_RESOLUTION_RULES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ContentResv1", "CONFLICT_CONTENT_RESV")]
        public EntityCollection<RTConflictContentReservation> ContentReservation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflictContentReservation>("TfsMigrationRuntimeEntityModel.FK_ContentResv1", "CONFLICT_CONTENT_RESV");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflictContentReservation>("TfsMigrationRuntimeEntityModel.FK_ContentResv1", "CONFLICT_CONTENT_RESV", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts51", "RTConflictType")]
        public RTConflictType ConflictType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_Conflicts51", "RTConflictType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_Conflicts51", "RTConflictType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflictType> ConflictTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_Conflicts51", "RTConflictType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_Conflicts51", "RTConflictType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_ChangeAction", "RTChangeAction")]
        public RTChangeAction ConflictedChangeAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_ChangeAction", "RTChangeAction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_ChangeAction", "RTChangeAction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTChangeAction> ConflictedChangeActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_ChangeAction", "RTChangeAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_ChangeAction", "RTChangeAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_LinkChangeAction", "RTLinkChangeAction")]
        public RTLinkChangeAction ConflictedLinkChangeAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeAction", "RTLinkChangeAction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeAction", "RTLinkChangeAction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTLinkChangeAction> ConflictedLinkChangeActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeAction", "RTLinkChangeAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeAction", "RTLinkChangeAction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_LinkChangeGroup", "RTLinkChangeGroup")]
        public RTLinkChangeGroup ConflictedLinkChangeGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeGroup", "RTLinkChangeGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeGroup", "RTLinkChangeGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTLinkChangeGroup> ConflictedLinkChangeGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeGroup", "RTLinkChangeGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeGroup", "RTLinkChangeGroup", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTConflictCollection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTConflictCollection : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTConflictCollection object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static RTConflictCollection CreateRTConflictCollection(global::System.Int32 id)
        {
            RTConflictCollection rTConflictCollection = new RTConflictCollection();
            rTConflictCollection.Id = id;
            return rTConflictCollection;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts1", "CONFLICT_CONFLICTS")]
        public EntityCollection<RTConflict> Conflicts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts1", "CONFLICT_CONFLICTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts1", "CONFLICT_CONFLICTS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupRun_To_ConflictCollection", "RTSessionGroupRun")]
        public RTSessionGroupRun SessionGroupRun
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTSessionGroupRun").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTSessionGroupRun").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroupRun> SessionGroupRunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTSessionGroupRun");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTSessionGroupRun", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionRun_To_ConflictCollection", "RTSessionRun")]
        public RTSessionRun SessionRun
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTSessionRun").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTSessionRun").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionRun> SessionRunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTSessionRun");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTSessionRun", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTConflictContentReservation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTConflictContentReservation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTConflictContentReservation object.
        /// </summary>
        /// <param name="conflictId">Initial value of the ConflictId property.</param>
        /// <param name="itemId">Initial value of the ItemId property.</param>
        public static RTConflictContentReservation CreateRTConflictContentReservation(global::System.Int32 conflictId, global::System.Int64 itemId)
        {
            RTConflictContentReservation rTConflictContentReservation = new RTConflictContentReservation();
            rTConflictContentReservation.ConflictId = conflictId;
            rTConflictContentReservation.ItemId = itemId;
            return rTConflictContentReservation;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ConflictId
        {
            get
            {
                return _ConflictId;
            }
            set
            {
                if (_ConflictId != value)
                {
                    OnConflictIdChanging(value);
                    ReportPropertyChanging("ConflictId");
                    _ConflictId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ConflictId");
                    OnConflictIdChanged();
                }
            }
        }
        private global::System.Int32 _ConflictId;
        partial void OnConflictIdChanging(global::System.Int32 value);
        partial void OnConflictIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
                if (_ItemId != value)
                {
                    OnItemIdChanging(value);
                    ReportPropertyChanging("ItemId");
                    _ItemId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ItemId");
                    OnItemIdChanged();
                }
            }
        }
        private global::System.Int64 _ItemId;
        partial void OnItemIdChanging(global::System.Int64 value);
        partial void OnItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ContentResv1", "CONFLICT_CONFLICTS")]
        public RTConflict Conflict
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflict>("TfsMigrationRuntimeEntityModel.FK_ContentResv1", "CONFLICT_CONFLICTS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflict>("TfsMigrationRuntimeEntityModel.FK_ContentResv1", "CONFLICT_CONFLICTS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflict> ConflictReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflict>("TfsMigrationRuntimeEntityModel.FK_ContentResv1", "CONFLICT_CONFLICTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflict>("TfsMigrationRuntimeEntityModel.FK_ContentResv1", "CONFLICT_CONFLICTS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ContentResv2", "RUNTIME_MIGRATION_ITEMS")]
        public RTMigrationItem ItemReservedFor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_ContentResv2", "RUNTIME_MIGRATION_ITEMS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_ContentResv2", "RUNTIME_MIGRATION_ITEMS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationItem> ItemReservedForReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_ContentResv2", "RUNTIME_MIGRATION_ITEMS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_ContentResv2", "RUNTIME_MIGRATION_ITEMS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTConflictRuleScope")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTConflictRuleScope : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTConflictRuleScope object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="scope">Initial value of the Scope property.</param>
        public static RTConflictRuleScope CreateRTConflictRuleScope(global::System.Int32 id, global::System.String scope)
        {
            RTConflictRuleScope rTConflictRuleScope = new RTConflictRuleScope();
            rTConflictRuleScope.Id = id;
            rTConflictRuleScope.Scope = scope;
            return rTConflictRuleScope;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Scope
        {
            get
            {
                return _Scope;
            }
            set
            {
                OnScopeChanging(value);
                ReportPropertyChanging("Scope");
                _Scope = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Scope");
                OnScopeChanged();
            }
        }
        private global::System.String _Scope;
        partial void OnScopeChanging(global::System.String value);
        partial void OnScopeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRules1", "CONFLICT_RESOLUTION_RULES")]
        public EntityCollection<RTResolutionRule> ResolutionRules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules1", "CONFLICT_RESOLUTION_RULES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules1", "CONFLICT_RESOLUTION_RULES", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTConflictType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTConflictType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTConflictType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        public static RTConflictType CreateRTConflictType(global::System.Int32 id, global::System.Guid referenceName, global::System.String friendlyName)
        {
            RTConflictType rTConflictType = new RTConflictType();
            rTConflictType.Id = id;
            rTConflictType.ReferenceName = referenceName;
            rTConflictType.FriendlyName = friendlyName;
            return rTConflictType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DescriptionDoc
        {
            get
            {
                return _DescriptionDoc;
            }
            set
            {
                OnDescriptionDocChanging(value);
                ReportPropertyChanging("DescriptionDoc");
                _DescriptionDoc = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DescriptionDoc");
                OnDescriptionDocChanged();
            }
        }
        private global::System.String _DescriptionDoc;
        partial void OnDescriptionDocChanging(global::System.String value);
        partial void OnDescriptionDocChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.Guid _ReferenceName;
        partial void OnReferenceNameChanging(global::System.Guid value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsActive;
        partial void OnIsActiveChanging(Nullable<global::System.Boolean> value);
        partial void OnIsActiveChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts51", "RTConflict")]
        public EntityCollection<RTConflict> Conflicts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts51", "RTConflict");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts51", "RTConflict", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRules21", "RTResolutionRule")]
        public EntityCollection<RTResolutionRule> ResolutionRules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules21", "RTResolutionRule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules21", "RTResolutionRule", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_to_provider", "RTProvider")]
        public RTProvider Provider
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_to_provider", "RTProvider").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_to_provider", "RTProvider").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTProvider> ProviderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_to_provider", "RTProvider");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_to_provider", "RTProvider", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTConversionHistory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTConversionHistory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTConversionHistory object.
        /// </summary>
        /// <param name="utcWhen">Initial value of the UtcWhen property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="contentChanged">Initial value of the ContentChanged property.</param>
        public static RTConversionHistory CreateRTConversionHistory(global::System.DateTime utcWhen, global::System.Int64 id, global::System.Boolean contentChanged)
        {
            RTConversionHistory rTConversionHistory = new RTConversionHistory();
            rTConversionHistory.UtcWhen = utcWhen;
            rTConversionHistory.Id = id;
            rTConversionHistory.ContentChanged = contentChanged;
            return rTConversionHistory;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime UtcWhen
        {
            get
            {
                return _UtcWhen;
            }
            set
            {
                OnUtcWhenChanging(value);
                ReportPropertyChanging("UtcWhen");
                _UtcWhen = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UtcWhen");
                OnUtcWhenChanged();
            }
        }
        private global::System.DateTime _UtcWhen;
        partial void OnUtcWhenChanging(global::System.DateTime value);
        partial void OnUtcWhenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Comment
        {
            get
            {
                return _Comment;
            }
            set
            {
                OnCommentChanging(value);
                ReportPropertyChanging("Comment");
                _Comment = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Comment");
                OnCommentChanged();
            }
        }
        private global::System.String _Comment;
        partial void OnCommentChanging(global::System.String value);
        partial void OnCommentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean ContentChanged
        {
            get
            {
                return _ContentChanged;
            }
            set
            {
                OnContentChangedChanging(value);
                ReportPropertyChanging("ContentChanged");
                _ContentChanged = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContentChanged");
                OnContentChangedChanged();
            }
        }
        private global::System.Boolean _ContentChanged;
        partial void OnContentChangedChanging(global::System.Boolean value);
        partial void OnContentChangedChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_MigrationSource", "RTMigrationSource")]
        public RTMigrationSource SourceMigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_MigrationSource", "RTMigrationSource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_MigrationSource", "RTMigrationSource").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> SourceMigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_MigrationSource", "RTMigrationSource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_MigrationSource", "RTMigrationSource", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_ChangeGroup", "RTChangeGroup")]
        public RTChangeGroup SourceChangeGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_ChangeGroup", "RTChangeGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_ChangeGroup", "RTChangeGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTChangeGroup> SourceChangeGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_ChangeGroup", "RTChangeGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_ChangeGroup", "RTChangeGroup", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs3", "RTItemRevisionPair")]
        public EntityCollection<RTItemRevisionPair> ItemRevisionPairs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTItemRevisionPair>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs3", "RTItemRevisionPair");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTItemRevisionPair>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs3", "RTItemRevisionPair", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_SessionRun", "RTSessionRun")]
        public RTSessionRun SessionRun
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_SessionRun", "RTSessionRun").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_SessionRun", "RTSessionRun").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionRun> SessionRunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_SessionRun", "RTSessionRun");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_SessionRun", "RTSessionRun", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTFieldExclusion")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTFieldExclusion : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTFieldExclusion object.
        /// </summary>
        /// <param name="fieldName">Initial value of the FieldName property.</param>
        /// <param name="direction">Initial value of the Direction property.</param>
        /// <param name="wITypeMapId">Initial value of the WITypeMapId property.</param>
        public static RTFieldExclusion CreateRTFieldExclusion(global::System.String fieldName, global::System.Int32 direction, global::System.Int32 wITypeMapId)
        {
            RTFieldExclusion rTFieldExclusion = new RTFieldExclusion();
            rTFieldExclusion.FieldName = fieldName;
            rTFieldExclusion.Direction = direction;
            rTFieldExclusion.WITypeMapId = wITypeMapId;
            return rTFieldExclusion;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FieldName
        {
            get
            {
                return _FieldName;
            }
            set
            {
                if (_FieldName != value)
                {
                    OnFieldNameChanging(value);
                    ReportPropertyChanging("FieldName");
                    _FieldName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("FieldName");
                    OnFieldNameChanged();
                }
            }
        }
        private global::System.String _FieldName;
        partial void OnFieldNameChanging(global::System.String value);
        partial void OnFieldNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Direction
        {
            get
            {
                return _Direction;
            }
            set
            {
                if (_Direction != value)
                {
                    OnDirectionChanging(value);
                    ReportPropertyChanging("Direction");
                    _Direction = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Direction");
                    OnDirectionChanged();
                }
            }
        }
        private global::System.Int32 _Direction;
        partial void OnDirectionChanging(global::System.Int32 value);
        partial void OnDirectionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WITypeMapId
        {
            get
            {
                return _WITypeMapId;
            }
            set
            {
                if (_WITypeMapId != value)
                {
                    OnWITypeMapIdChanging(value);
                    ReportPropertyChanging("WITypeMapId");
                    _WITypeMapId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WITypeMapId");
                    OnWITypeMapIdChanged();
                }
            }
        }
        private global::System.Int32 _WITypeMapId;
        partial void OnWITypeMapIdChanging(global::System.Int32 value);
        partial void OnWITypeMapIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldExclCollection", "WI_TYPE_MAP_COLLECTION")]
        public RTWorkItemTypeMap WorkItemTypeMap
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldExclCollection", "WI_TYPE_MAP_COLLECTION").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldExclCollection", "WI_TYPE_MAP_COLLECTION").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTWorkItemTypeMap> WorkItemTypeMapReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldExclCollection", "WI_TYPE_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldExclCollection", "WI_TYPE_MAP_COLLECTION", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTFieldMap")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTFieldMap : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTFieldMap object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="direction">Initial value of the Direction property.</param>
        public static RTFieldMap CreateRTFieldMap(global::System.Int32 id, global::System.Int32 direction)
        {
            RTFieldMap rTFieldMap = new RTFieldMap();
            rTFieldMap.Id = id;
            rTFieldMap.Direction = direction;
            return rTFieldMap;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Direction
        {
            get
            {
                return _Direction;
            }
            set
            {
                OnDirectionChanging(value);
                ReportPropertyChanging("Direction");
                _Direction = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Direction");
                OnDirectionChanged();
            }
        }
        private global::System.Int32 _Direction;
        partial void OnDirectionChanging(global::System.Int32 value);
        partial void OnDirectionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldMapCollection1", "WI_TYPE_MAP_COLLECTION")]
        public RTWorkItemTypeMap WorkItemTypeMap
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection1", "WI_TYPE_MAP_COLLECTION").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection1", "WI_TYPE_MAP_COLLECTION").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTWorkItemTypeMap> WorkItemTypeMapReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection1", "WI_TYPE_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection1", "WI_TYPE_MAP_COLLECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldMapCollection2", "MAPPINGS")]
        public RTMapping Mapping
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection2", "MAPPINGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection2", "MAPPINGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMapping> MappingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection2", "MAPPINGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection2", "MAPPINGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ValueMapCollection2", "VALUE_MAP_COLLECTION")]
        public EntityCollection<RTValueMap> ValueMaps
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTValueMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection2", "VALUE_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTValueMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection2", "VALUE_MAP_COLLECTION", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTGeneralPerformanceData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTGeneralPerformanceData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTGeneralPerformanceData object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="sourceUniqueId">Initial value of the SourceUniqueId property.</param>
        /// <param name="criterionReferenceName">Initial value of the CriterionReferenceName property.</param>
        /// <param name="criterionFriendlyName">Initial value of the CriterionFriendlyName property.</param>
        public static RTGeneralPerformanceData CreateRTGeneralPerformanceData(global::System.Int32 id, global::System.Guid sessionUniqueId, global::System.Guid sourceUniqueId, global::System.Guid criterionReferenceName, global::System.String criterionFriendlyName)
        {
            RTGeneralPerformanceData rTGeneralPerformanceData = new RTGeneralPerformanceData();
            rTGeneralPerformanceData.Id = id;
            rTGeneralPerformanceData.SessionUniqueId = sessionUniqueId;
            rTGeneralPerformanceData.SourceUniqueId = sourceUniqueId;
            rTGeneralPerformanceData.CriterionReferenceName = criterionReferenceName;
            rTGeneralPerformanceData.CriterionFriendlyName = criterionFriendlyName;
            return rTGeneralPerformanceData;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceUniqueId
        {
            get
            {
                return _SourceUniqueId;
            }
            set
            {
                OnSourceUniqueIdChanging(value);
                ReportPropertyChanging("SourceUniqueId");
                _SourceUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceUniqueId");
                OnSourceUniqueIdChanged();
            }
        }
        private global::System.Guid _SourceUniqueId;
        partial void OnSourceUniqueIdChanging(global::System.Guid value);
        partial void OnSourceUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid CriterionReferenceName
        {
            get
            {
                return _CriterionReferenceName;
            }
            set
            {
                OnCriterionReferenceNameChanging(value);
                ReportPropertyChanging("CriterionReferenceName");
                _CriterionReferenceName = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CriterionReferenceName");
                OnCriterionReferenceNameChanged();
            }
        }
        private global::System.Guid _CriterionReferenceName;
        partial void OnCriterionReferenceNameChanging(global::System.Guid value);
        partial void OnCriterionReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CriterionFriendlyName
        {
            get
            {
                return _CriterionFriendlyName;
            }
            set
            {
                OnCriterionFriendlyNameChanging(value);
                ReportPropertyChanging("CriterionFriendlyName");
                _CriterionFriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CriterionFriendlyName");
                OnCriterionFriendlyNameChanged();
            }
        }
        private global::System.String _CriterionFriendlyName;
        partial void OnCriterionFriendlyNameChanging(global::System.String value);
        partial void OnCriterionFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> PerfCounter
        {
            get
            {
                return _PerfCounter;
            }
            set
            {
                OnPerfCounterChanging(value);
                ReportPropertyChanging("PerfCounter");
                _PerfCounter = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PerfCounter");
                OnPerfCounterChanged();
            }
        }
        private Nullable<global::System.Int64> _PerfCounter;
        partial void OnPerfCounterChanging(Nullable<global::System.Int64> value);
        partial void OnPerfCounterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> PerfStartTime
        {
            get
            {
                return _PerfStartTime;
            }
            set
            {
                OnPerfStartTimeChanging(value);
                ReportPropertyChanging("PerfStartTime");
                _PerfStartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PerfStartTime");
                OnPerfStartTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _PerfStartTime;
        partial void OnPerfStartTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnPerfStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> PerfFinishTime
        {
            get
            {
                return _PerfFinishTime;
            }
            set
            {
                OnPerfFinishTimeChanging(value);
                ReportPropertyChanging("PerfFinishTime");
                _PerfFinishTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PerfFinishTime");
                OnPerfFinishTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _PerfFinishTime;
        partial void OnPerfFinishTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnPerfFinishTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_PerfData_To_SessionGroupRun", "RTSessionGroupRun")]
        public RTSessionGroupRun RuntimeSessionGroupRun
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_PerfData_To_SessionGroupRun", "RTSessionGroupRun").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_PerfData_To_SessionGroupRun", "RTSessionGroupRun").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroupRun> RuntimeSessionGroupRunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_PerfData_To_SessionGroupRun", "RTSessionGroupRun");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_PerfData_To_SessionGroupRun", "RTSessionGroupRun", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTHighWaterMark")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTHighWaterMark : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTHighWaterMark object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="sourceUniqueId">Initial value of the SourceUniqueId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static RTHighWaterMark CreateRTHighWaterMark(global::System.Int32 id, global::System.Guid sessionUniqueId, global::System.Guid sourceUniqueId, global::System.String name)
        {
            RTHighWaterMark rTHighWaterMark = new RTHighWaterMark();
            rTHighWaterMark.Id = id;
            rTHighWaterMark.SessionUniqueId = sessionUniqueId;
            rTHighWaterMark.SourceUniqueId = sourceUniqueId;
            rTHighWaterMark.Name = name;
            return rTHighWaterMark;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceUniqueId
        {
            get
            {
                return _SourceUniqueId;
            }
            set
            {
                OnSourceUniqueIdChanging(value);
                ReportPropertyChanging("SourceUniqueId");
                _SourceUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceUniqueId");
                OnSourceUniqueIdChanged();
            }
        }
        private global::System.Guid _SourceUniqueId;
        partial void OnSourceUniqueIdChanging(global::System.Guid value);
        partial void OnSourceUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTItemRevisionPair")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTItemRevisionPair : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTItemRevisionPair object.
        /// </summary>
        /// <param name="leftMigrationItemId">Initial value of the LeftMigrationItemId property.</param>
        /// <param name="rightMigrationItemId">Initial value of the RightMigrationItemId property.</param>
        public static RTItemRevisionPair CreateRTItemRevisionPair(global::System.Int64 leftMigrationItemId, global::System.Int64 rightMigrationItemId)
        {
            RTItemRevisionPair rTItemRevisionPair = new RTItemRevisionPair();
            rTItemRevisionPair.LeftMigrationItemId = leftMigrationItemId;
            rTItemRevisionPair.RightMigrationItemId = rightMigrationItemId;
            return rTItemRevisionPair;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LeftMigrationItemId
        {
            get
            {
                return _LeftMigrationItemId;
            }
            set
            {
                if (_LeftMigrationItemId != value)
                {
                    OnLeftMigrationItemIdChanging(value);
                    ReportPropertyChanging("LeftMigrationItemId");
                    _LeftMigrationItemId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LeftMigrationItemId");
                    OnLeftMigrationItemIdChanged();
                }
            }
        }
        private global::System.Int64 _LeftMigrationItemId;
        partial void OnLeftMigrationItemIdChanging(global::System.Int64 value);
        partial void OnLeftMigrationItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RightMigrationItemId
        {
            get
            {
                return _RightMigrationItemId;
            }
            set
            {
                if (_RightMigrationItemId != value)
                {
                    OnRightMigrationItemIdChanging(value);
                    ReportPropertyChanging("RightMigrationItemId");
                    _RightMigrationItemId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RightMigrationItemId");
                    OnRightMigrationItemIdChanged();
                }
            }
        }
        private global::System.Int64 _RightMigrationItemId;
        partial void OnRightMigrationItemIdChanging(global::System.Int64 value);
        partial void OnRightMigrationItemIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs1", "RUNTIME_MIGRATION_ITEMS")]
        public RTMigrationItem LeftMigrationItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs1", "RUNTIME_MIGRATION_ITEMS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs1", "RUNTIME_MIGRATION_ITEMS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationItem> LeftMigrationItemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs1", "RUNTIME_MIGRATION_ITEMS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs1", "RUNTIME_MIGRATION_ITEMS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs2", "RUNTIME_MIGRATION_ITEMS")]
        public RTMigrationItem RightMigrationItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs2", "RUNTIME_MIGRATION_ITEMS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs2", "RUNTIME_MIGRATION_ITEMS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationItem> RightMigrationItemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs2", "RUNTIME_MIGRATION_ITEMS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs2", "RUNTIME_MIGRATION_ITEMS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs3", "RTConversionHistory")]
        public RTConversionHistory ConversionHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs3", "RTConversionHistory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs3", "RTConversionHistory").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConversionHistory> ConversionHistoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs3", "RTConversionHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs3", "RTConversionHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLastProcessedItemVersions")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLastProcessedItemVersions : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLastProcessedItemVersions object.
        /// </summary>
        /// <param name="migrationSourceId">Initial value of the MigrationSourceId property.</param>
        /// <param name="itemId">Initial value of the ItemId property.</param>
        /// <param name="version">Initial value of the Version property.</param>
        public static RTLastProcessedItemVersions CreateRTLastProcessedItemVersions(global::System.Guid migrationSourceId, global::System.String itemId, global::System.String version)
        {
            RTLastProcessedItemVersions rTLastProcessedItemVersions = new RTLastProcessedItemVersions();
            rTLastProcessedItemVersions.MigrationSourceId = migrationSourceId;
            rTLastProcessedItemVersions.ItemId = itemId;
            rTLastProcessedItemVersions.Version = version;
            return rTLastProcessedItemVersions;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid MigrationSourceId
        {
            get
            {
                return _MigrationSourceId;
            }
            set
            {
                if (_MigrationSourceId != value)
                {
                    OnMigrationSourceIdChanging(value);
                    ReportPropertyChanging("MigrationSourceId");
                    _MigrationSourceId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MigrationSourceId");
                    OnMigrationSourceIdChanged();
                }
            }
        }
        private global::System.Guid _MigrationSourceId;
        partial void OnMigrationSourceIdChanging(global::System.Guid value);
        partial void OnMigrationSourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
                if (_ItemId != value)
                {
                    OnItemIdChanging(value);
                    ReportPropertyChanging("ItemId");
                    _ItemId = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ItemId");
                    OnItemIdChanged();
                }
            }
        }
        private global::System.String _ItemId;
        partial void OnItemIdChanging(global::System.String value);
        partial void OnItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Version
        {
            get
            {
                return _Version;
            }
            set
            {
                OnVersionChanging(value);
                ReportPropertyChanging("Version");
                _Version = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Version");
                OnVersionChanged();
            }
        }
        private global::System.String _Version;
        partial void OnVersionChanging(global::System.String value);
        partial void OnVersionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLastProcessedItemVersionsAsofChangeGroupId")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLastProcessedItemVersionsAsofChangeGroupId : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLastProcessedItemVersionsAsofChangeGroupId object.
        /// </summary>
        /// <param name="migrationSourceId">Initial value of the MigrationSourceId property.</param>
        /// <param name="changeGroupId">Initial value of the ChangeGroupId property.</param>
        public static RTLastProcessedItemVersionsAsofChangeGroupId CreateRTLastProcessedItemVersionsAsofChangeGroupId(global::System.Guid migrationSourceId, global::System.Int64 changeGroupId)
        {
            RTLastProcessedItemVersionsAsofChangeGroupId rTLastProcessedItemVersionsAsofChangeGroupId = new RTLastProcessedItemVersionsAsofChangeGroupId();
            rTLastProcessedItemVersionsAsofChangeGroupId.MigrationSourceId = migrationSourceId;
            rTLastProcessedItemVersionsAsofChangeGroupId.ChangeGroupId = changeGroupId;
            return rTLastProcessedItemVersionsAsofChangeGroupId;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid MigrationSourceId
        {
            get
            {
                return _MigrationSourceId;
            }
            set
            {
                if (_MigrationSourceId != value)
                {
                    OnMigrationSourceIdChanging(value);
                    ReportPropertyChanging("MigrationSourceId");
                    _MigrationSourceId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MigrationSourceId");
                    OnMigrationSourceIdChanged();
                }
            }
        }
        private global::System.Guid _MigrationSourceId;
        partial void OnMigrationSourceIdChanging(global::System.Guid value);
        partial void OnMigrationSourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ChangeGroupId
        {
            get
            {
                return _ChangeGroupId;
            }
            set
            {
                OnChangeGroupIdChanging(value);
                ReportPropertyChanging("ChangeGroupId");
                _ChangeGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ChangeGroupId");
                OnChangeGroupIdChanged();
            }
        }
        private global::System.Int64 _ChangeGroupId;
        partial void OnChangeGroupIdChanging(global::System.Int64 value);
        partial void OnChangeGroupIdChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLatencyPoll")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLatencyPoll : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLatencyPoll object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="pollTime">Initial value of the PollTime property.</param>
        /// <param name="migrationHWM">Initial value of the MigrationHWM property.</param>
        /// <param name="latency">Initial value of the Latency property.</param>
        /// <param name="backlogCount">Initial value of the BacklogCount property.</param>
        public static RTLatencyPoll CreateRTLatencyPoll(global::System.Int64 id, global::System.DateTime pollTime, global::System.DateTime migrationHWM, global::System.Int32 latency, global::System.Int32 backlogCount)
        {
            RTLatencyPoll rTLatencyPoll = new RTLatencyPoll();
            rTLatencyPoll.Id = id;
            rTLatencyPoll.PollTime = pollTime;
            rTLatencyPoll.MigrationHWM = migrationHWM;
            rTLatencyPoll.Latency = latency;
            rTLatencyPoll.BacklogCount = backlogCount;
            return rTLatencyPoll;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime PollTime
        {
            get
            {
                return _PollTime;
            }
            set
            {
                OnPollTimeChanging(value);
                ReportPropertyChanging("PollTime");
                _PollTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PollTime");
                OnPollTimeChanged();
            }
        }
        private global::System.DateTime _PollTime;
        partial void OnPollTimeChanging(global::System.DateTime value);
        partial void OnPollTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime MigrationHWM
        {
            get
            {
                return _MigrationHWM;
            }
            set
            {
                OnMigrationHWMChanging(value);
                ReportPropertyChanging("MigrationHWM");
                _MigrationHWM = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MigrationHWM");
                OnMigrationHWMChanged();
            }
        }
        private global::System.DateTime _MigrationHWM;
        partial void OnMigrationHWMChanging(global::System.DateTime value);
        partial void OnMigrationHWMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Latency
        {
            get
            {
                return _Latency;
            }
            set
            {
                OnLatencyChanging(value);
                ReportPropertyChanging("Latency");
                _Latency = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Latency");
                OnLatencyChanged();
            }
        }
        private global::System.Int32 _Latency;
        partial void OnLatencyChanging(global::System.Int32 value);
        partial void OnLatencyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BacklogCount
        {
            get
            {
                return _BacklogCount;
            }
            set
            {
                OnBacklogCountChanging(value);
                ReportPropertyChanging("BacklogCount");
                _BacklogCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BacklogCount");
                OnBacklogCountChanged();
            }
        }
        private global::System.Int32 _BacklogCount;
        partial void OnBacklogCountChanging(global::System.Int32 value);
        partial void OnBacklogCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LastMigratedChange
        {
            get
            {
                return _LastMigratedChange;
            }
            set
            {
                OnLastMigratedChangeChanging(value);
                ReportPropertyChanging("LastMigratedChange");
                _LastMigratedChange = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LastMigratedChange");
                OnLastMigratedChangeChanged();
            }
        }
        private global::System.String _LastMigratedChange;
        partial void OnLastMigratedChangeChanging(global::System.String value);
        partial void OnLastMigratedChangeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "LATENCY_POLL_FK_MigrationSource_fkey", "RTMigrationSource")]
        public RTMigrationSource MigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.LATENCY_POLL_FK_MigrationSource_fkey", "RTMigrationSource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.LATENCY_POLL_FK_MigrationSource_fkey", "RTMigrationSource").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> MigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.LATENCY_POLL_FK_MigrationSource_fkey", "RTMigrationSource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.LATENCY_POLL_FK_MigrationSource_fkey", "RTMigrationSource", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLinkChangeAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLinkChangeAction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLinkChangeAction object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sessionGroupUniqueId">Initial value of the SessionGroupUniqueId property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="actionId">Initial value of the ActionId property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="conflicted">Initial value of the Conflicted property.</param>
        /// <param name="sourceId">Initial value of the SourceId property.</param>
        public static RTLinkChangeAction CreateRTLinkChangeAction(global::System.Int64 id, global::System.Guid sessionGroupUniqueId, global::System.Guid sessionUniqueId, global::System.Guid actionId, global::System.Int32 status, global::System.Boolean conflicted, global::System.Guid sourceId)
        {
            RTLinkChangeAction rTLinkChangeAction = new RTLinkChangeAction();
            rTLinkChangeAction.Id = id;
            rTLinkChangeAction.SessionGroupUniqueId = sessionGroupUniqueId;
            rTLinkChangeAction.SessionUniqueId = sessionUniqueId;
            rTLinkChangeAction.ActionId = actionId;
            rTLinkChangeAction.Status = status;
            rTLinkChangeAction.Conflicted = conflicted;
            rTLinkChangeAction.SourceId = sourceId;
            return rTLinkChangeAction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionGroupUniqueId
        {
            get
            {
                return _SessionGroupUniqueId;
            }
            set
            {
                OnSessionGroupUniqueIdChanging(value);
                ReportPropertyChanging("SessionGroupUniqueId");
                _SessionGroupUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionGroupUniqueId");
                OnSessionGroupUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionGroupUniqueId;
        partial void OnSessionGroupUniqueIdChanging(global::System.Guid value);
        partial void OnSessionGroupUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ActionId
        {
            get
            {
                return _ActionId;
            }
            set
            {
                OnActionIdChanging(value);
                ReportPropertyChanging("ActionId");
                _ActionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActionId");
                OnActionIdChanged();
            }
        }
        private global::System.Guid _ActionId;
        partial void OnActionIdChanging(global::System.Guid value);
        partial void OnActionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ExecutionOrder
        {
            get
            {
                return _ExecutionOrder;
            }
            set
            {
                OnExecutionOrderChanging(value);
                ReportPropertyChanging("ExecutionOrder");
                _ExecutionOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecutionOrder");
                OnExecutionOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _ExecutionOrder;
        partial void OnExecutionOrderChanging(Nullable<global::System.Int32> value);
        partial void OnExecutionOrderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Conflicted
        {
            get
            {
                return _Conflicted;
            }
            set
            {
                OnConflictedChanging(value);
                ReportPropertyChanging("Conflicted");
                _Conflicted = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Conflicted");
                OnConflictedChanged();
            }
        }
        private global::System.Boolean _Conflicted;
        partial void OnConflictedChanging(global::System.Boolean value);
        partial void OnConflictedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceId
        {
            get
            {
                return _SourceId;
            }
            set
            {
                OnSourceIdChanging(value);
                ReportPropertyChanging("SourceId");
                _SourceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceId");
                OnSourceIdChanged();
            }
        }
        private global::System.Guid _SourceId;
        partial void OnSourceIdChanging(global::System.Guid value);
        partial void OnSourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ServerLinkChangeId
        {
            get
            {
                return _ServerLinkChangeId;
            }
            set
            {
                OnServerLinkChangeIdChanging(value);
                ReportPropertyChanging("ServerLinkChangeId");
                _ServerLinkChangeId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ServerLinkChangeId");
                OnServerLinkChangeIdChanged();
            }
        }
        private global::System.String _ServerLinkChangeId;
        partial void OnServerLinkChangeIdChanging(global::System.String value);
        partial void OnServerLinkChangeIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkChangeAction_to_ArtifactLink", "LINK_ARTIFACT_LINK")]
        public RTArtifactLink ArtifactLink
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactLink>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_ArtifactLink", "LINK_ARTIFACT_LINK").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactLink>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_ArtifactLink", "LINK_ARTIFACT_LINK").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTArtifactLink> ArtifactLinkReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactLink>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_ArtifactLink", "LINK_ARTIFACT_LINK");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTArtifactLink>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_ArtifactLink", "LINK_ARTIFACT_LINK", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_GROUPS")]
        public RTLinkChangeGroup LinkChangeGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_GROUPS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_GROUPS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTLinkChangeGroup> LinkChangeGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_GROUPS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTLinkChangeGroup>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_GROUPS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_LinkChangeAction", "RTConflict")]
        public EntityCollection<RTConflict> CONFLICT_CONFLICTS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeAction", "RTConflict");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeAction", "RTConflict", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLinkChangeGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLinkChangeGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLinkChangeGroup object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="containsConflictedAction">Initial value of the ContainsConflictedAction property.</param>
        /// <param name="sessionGroupUniqueId">Initial value of the SessionGroupUniqueId property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="sourceId">Initial value of the SourceId property.</param>
        public static RTLinkChangeGroup CreateRTLinkChangeGroup(global::System.Int64 id, global::System.Int32 status, global::System.Boolean containsConflictedAction, global::System.Guid sessionGroupUniqueId, global::System.Guid sessionUniqueId, global::System.Guid sourceId)
        {
            RTLinkChangeGroup rTLinkChangeGroup = new RTLinkChangeGroup();
            rTLinkChangeGroup.Id = id;
            rTLinkChangeGroup.Status = status;
            rTLinkChangeGroup.ContainsConflictedAction = containsConflictedAction;
            rTLinkChangeGroup.SessionGroupUniqueId = sessionGroupUniqueId;
            rTLinkChangeGroup.SessionUniqueId = sessionUniqueId;
            rTLinkChangeGroup.SourceId = sourceId;
            return rTLinkChangeGroup;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean ContainsConflictedAction
        {
            get
            {
                return _ContainsConflictedAction;
            }
            set
            {
                OnContainsConflictedActionChanging(value);
                ReportPropertyChanging("ContainsConflictedAction");
                _ContainsConflictedAction = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContainsConflictedAction");
                OnContainsConflictedActionChanged();
            }
        }
        private global::System.Boolean _ContainsConflictedAction;
        partial void OnContainsConflictedActionChanging(global::System.Boolean value);
        partial void OnContainsConflictedActionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionGroupUniqueId
        {
            get
            {
                return _SessionGroupUniqueId;
            }
            set
            {
                OnSessionGroupUniqueIdChanging(value);
                ReportPropertyChanging("SessionGroupUniqueId");
                _SessionGroupUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionGroupUniqueId");
                OnSessionGroupUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionGroupUniqueId;
        partial void OnSessionGroupUniqueIdChanging(global::System.Guid value);
        partial void OnSessionGroupUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceId
        {
            get
            {
                return _SourceId;
            }
            set
            {
                OnSourceIdChanging(value);
                ReportPropertyChanging("SourceId");
                _SourceId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceId");
                OnSourceIdChanged();
            }
        }
        private global::System.Guid _SourceId;
        partial void OnSourceIdChanging(global::System.Guid value);
        partial void OnSourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupName
        {
            get
            {
                return _GroupName;
            }
            set
            {
                OnGroupNameChanging(value);
                ReportPropertyChanging("GroupName");
                _GroupName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupName");
                OnGroupNameChanged();
            }
        }
        private global::System.String _GroupName;
        partial void OnGroupNameChanging(global::System.String value);
        partial void OnGroupNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Age
        {
            get
            {
                return _Age;
            }
            set
            {
                OnAgeChanging(value);
                ReportPropertyChanging("Age");
                _Age = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Age");
                OnAgeChanged();
            }
        }
        private Nullable<global::System.Int32> _Age;
        partial void OnAgeChanging(Nullable<global::System.Int32> value);
        partial void OnAgeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RetriesAtCurrAge
        {
            get
            {
                return _RetriesAtCurrAge;
            }
            set
            {
                OnRetriesAtCurrAgeChanging(value);
                ReportPropertyChanging("RetriesAtCurrAge");
                _RetriesAtCurrAge = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RetriesAtCurrAge");
                OnRetriesAtCurrAgeChanged();
            }
        }
        private Nullable<global::System.Int32> _RetriesAtCurrAge;
        partial void OnRetriesAtCurrAgeChanging(Nullable<global::System.Int32> value);
        partial void OnRetriesAtCurrAgeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_ACTIONS")]
        public EntityCollection<RTLinkChangeAction> LinkChangeActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_ACTIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTLinkChangeAction>("TfsMigrationRuntimeEntityModel.FK_LinkChangeAction_to_LinkChangeGroup", "LINK_LINK_CHANGE_ACTIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts_to_LinkChangeGroup", "RTConflict")]
        public EntityCollection<RTConflict> CONFLICT_CONFLICTS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeGroup", "RTConflict");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts_to_LinkChangeGroup", "RTConflict", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLinkingSetting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLinkingSetting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLinkingSetting object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="settingXml">Initial value of the SettingXml property.</param>
        public static RTLinkingSetting CreateRTLinkingSetting(global::System.Int32 id, global::System.String settingXml)
        {
            RTLinkingSetting rTLinkingSetting = new RTLinkingSetting();
            rTLinkingSetting.Id = id;
            rTLinkingSetting.SettingXml = settingXml;
            return rTLinkingSetting;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SettingXml
        {
            get
            {
                return _SettingXml;
            }
            set
            {
                OnSettingXmlChanging(value);
                ReportPropertyChanging("SettingXml");
                _SettingXml = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SettingXml");
                OnSettingXmlChanged();
            }
        }
        private global::System.String _SettingXml;
        partial void OnSettingXmlChanging(global::System.String value);
        partial void OnSettingXmlChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupConfigs3", "SESSION_GROUP_CONFIGS")]
        public EntityCollection<RTSessionGroupConfig> SessionGroupConfig
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs3", "SESSION_GROUP_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs3", "SESSION_GROUP_CONFIGS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTLinkType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTLinkType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTLinkType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="displayName">Initial value of the DisplayName property.</param>
        public static RTLinkType CreateRTLinkType(global::System.Int32 id, global::System.String referenceName, global::System.String displayName)
        {
            RTLinkType rTLinkType = new RTLinkType();
            rTLinkType.Id = id;
            rTLinkType.ReferenceName = referenceName;
            rTLinkType.DisplayName = displayName;
            return rTLinkType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.String _ReferenceName;
        partial void OnReferenceNameChanging(global::System.String value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                OnDisplayNameChanging(value);
                ReportPropertyChanging("DisplayName");
                _DisplayName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DisplayName");
                OnDisplayNameChanged();
            }
        }
        private global::System.String _DisplayName;
        partial void OnDisplayNameChanging(global::System.String value);
        partial void OnDisplayNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ExtendedProperty
        {
            get
            {
                return _ExtendedProperty;
            }
            set
            {
                OnExtendedPropertyChanging(value);
                ReportPropertyChanging("ExtendedProperty");
                _ExtendedProperty = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ExtendedProperty");
                OnExtendedPropertyChanged();
            }
        }
        private global::System.String _ExtendedProperty;
        partial void OnExtendedPropertyChanging(global::System.String value);
        partial void OnExtendedPropertyChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ArtifactLink_to_LinkType", "LINK_ARTIFACT_LINK")]
        public EntityCollection<RTArtifactLink> ArtifactLinks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTArtifactLink>("TfsMigrationRuntimeEntityModel.FK_ArtifactLink_to_LinkType", "LINK_ARTIFACT_LINK");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTArtifactLink>("TfsMigrationRuntimeEntityModel.FK_ArtifactLink_to_LinkType", "LINK_ARTIFACT_LINK", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkType_to_ArtifactTypeSource", "LINK_ARTIFACT_TYPE")]
        public RTArtifactType SourceArtifactType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeSource", "LINK_ARTIFACT_TYPE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeSource", "LINK_ARTIFACT_TYPE").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTArtifactType> SourceArtifactTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeSource", "LINK_ARTIFACT_TYPE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeSource", "LINK_ARTIFACT_TYPE", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_LinkType_to_ArtifactTypeTarget", "LINK_ARTIFACT_TYPE")]
        public RTArtifactType TargetArtifactType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeTarget", "LINK_ARTIFACT_TYPE").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeTarget", "LINK_ARTIFACT_TYPE").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTArtifactType> TargetArtifactTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeTarget", "LINK_ARTIFACT_TYPE");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTArtifactType>("TfsMigrationRuntimeEntityModel.FK_LinkType_to_ArtifactTypeTarget", "LINK_ARTIFACT_TYPE", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTMapping")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTMapping : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTMapping object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="leftValue">Initial value of the LeftValue property.</param>
        /// <param name="rightValue">Initial value of the RightValue property.</param>
        public static RTMapping CreateRTMapping(global::System.Int32 id, global::System.String leftValue, global::System.String rightValue)
        {
            RTMapping rTMapping = new RTMapping();
            rTMapping.Id = id;
            rTMapping.LeftValue = leftValue;
            rTMapping.RightValue = rightValue;
            return rTMapping;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LeftValue
        {
            get
            {
                return _LeftValue;
            }
            set
            {
                OnLeftValueChanging(value);
                ReportPropertyChanging("LeftValue");
                _LeftValue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LeftValue");
                OnLeftValueChanged();
            }
        }
        private global::System.String _LeftValue;
        partial void OnLeftValueChanging(global::System.String value);
        partial void OnLeftValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RightValue
        {
            get
            {
                return _RightValue;
            }
            set
            {
                OnRightValueChanging(value);
                ReportPropertyChanging("RightValue");
                _RightValue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RightValue");
                OnRightValueChanged();
            }
        }
        private global::System.String _RightValue;
        partial void OnRightValueChanging(global::System.String value);
        partial void OnRightValueChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldMapCollection2", "FIELD_MAP_COLLECTION")]
        public EntityCollection<RTFieldMap> FieldMapsUsingMe
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection2", "FIELD_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection2", "FIELD_MAP_COLLECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ValueMapCollection1", "VALUE_MAP_COLLECTION")]
        public RTValueMap ValueMapsUsingMe
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTValueMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "VALUE_MAP_COLLECTION").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTValueMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "VALUE_MAP_COLLECTION").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTValueMap> ValueMapsUsingMeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTValueMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "VALUE_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTValueMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "VALUE_MAP_COLLECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_WITypeMapCollection", "WI_TYPE_MAP_COLLECTION")]
        public EntityCollection<RTWorkItemTypeMap> WorkItemTypeMapsUsingMe
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_WITypeMapCollection", "WI_TYPE_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTWorkItemTypeMap>("TfsMigrationRuntimeEntityModel.FK_WITypeMapCollection", "WI_TYPE_MAP_COLLECTION", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTMigrationItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTMigrationItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTMigrationItem object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="itemId">Initial value of the ItemId property.</param>
        /// <param name="itemVersion">Initial value of the ItemVersion property.</param>
        public static RTMigrationItem CreateRTMigrationItem(global::System.Int64 id, global::System.String itemId, global::System.String itemVersion)
        {
            RTMigrationItem rTMigrationItem = new RTMigrationItem();
            rTMigrationItem.Id = id;
            rTMigrationItem.ItemId = itemId;
            rTMigrationItem.ItemVersion = itemVersion;
            return rTMigrationItem;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
                OnItemIdChanging(value);
                ReportPropertyChanging("ItemId");
                _ItemId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ItemId");
                OnItemIdChanged();
            }
        }
        private global::System.String _ItemId;
        partial void OnItemIdChanging(global::System.String value);
        partial void OnItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemVersion
        {
            get
            {
                return _ItemVersion;
            }
            set
            {
                OnItemVersionChanging(value);
                ReportPropertyChanging("ItemVersion");
                _ItemVersion = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ItemVersion");
                OnItemVersionChanged();
            }
        }
        private global::System.String _ItemVersion;
        partial void OnItemVersionChanging(global::System.String value);
        partial void OnItemVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ItemData
        {
            get
            {
                return _ItemData;
            }
            set
            {
                OnItemDataChanging(value);
                ReportPropertyChanging("ItemData");
                _ItemData = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ItemData");
                OnItemDataChanged();
            }
        }
        private global::System.String _ItemData;
        partial void OnItemDataChanging(global::System.String value);
        partial void OnItemDataChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ContentResv2", "CONFLICT_CONTENT_RESV")]
        public EntityCollection<RTConflictContentReservation> ContentReservation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflictContentReservation>("TfsMigrationRuntimeEntityModel.FK_ContentResv2", "CONFLICT_CONTENT_RESV");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflictContentReservation>("TfsMigrationRuntimeEntityModel.FK_ContentResv2", "CONFLICT_CONTENT_RESV", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_MigrationItems", "MIGRATION_SOURCES")]
        public RTMigrationSource MigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_MigrationItems", "MIGRATION_SOURCES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_MigrationItems", "MIGRATION_SOURCES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> MigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_MigrationItems", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_MigrationItems", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs1", "RUNTIME_ITEM_REVISION_PAIRS")]
        public EntityCollection<RTItemRevisionPair> RevisionsAsLeftItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTItemRevisionPair>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs1", "RUNTIME_ITEM_REVISION_PAIRS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTItemRevisionPair>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs1", "RUNTIME_ITEM_REVISION_PAIRS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ItemRevPairs2", "RUNTIME_ITEM_REVISION_PAIRS")]
        public EntityCollection<RTItemRevisionPair> RevisionsAsRightItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTItemRevisionPair>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs2", "RUNTIME_ITEM_REVISION_PAIRS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTItemRevisionPair>("TfsMigrationRuntimeEntityModel.FK_RT_ItemRevPairs2", "RUNTIME_ITEM_REVISION_PAIRS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTMigrationSource")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTMigrationSource : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTMigrationSource object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="uniqueId">Initial value of the UniqueId property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        /// <param name="serverIdentifier">Initial value of the ServerIdentifier property.</param>
        /// <param name="serverUrl">Initial value of the ServerUrl property.</param>
        /// <param name="sourceIdentifier">Initial value of the SourceIdentifier property.</param>
        public static RTMigrationSource CreateRTMigrationSource(global::System.Int32 id, global::System.Guid uniqueId, global::System.String friendlyName, global::System.String serverIdentifier, global::System.String serverUrl, global::System.String sourceIdentifier)
        {
            RTMigrationSource rTMigrationSource = new RTMigrationSource();
            rTMigrationSource.Id = id;
            rTMigrationSource.UniqueId = uniqueId;
            rTMigrationSource.FriendlyName = friendlyName;
            rTMigrationSource.ServerIdentifier = serverIdentifier;
            rTMigrationSource.ServerUrl = serverUrl;
            rTMigrationSource.SourceIdentifier = sourceIdentifier;
            return rTMigrationSource;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UniqueId
        {
            get
            {
                return _UniqueId;
            }
            set
            {
                OnUniqueIdChanging(value);
                ReportPropertyChanging("UniqueId");
                _UniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UniqueId");
                OnUniqueIdChanged();
            }
        }
        private global::System.Guid _UniqueId;
        partial void OnUniqueIdChanging(global::System.Guid value);
        partial void OnUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServerIdentifier
        {
            get
            {
                return _ServerIdentifier;
            }
            set
            {
                OnServerIdentifierChanging(value);
                ReportPropertyChanging("ServerIdentifier");
                _ServerIdentifier = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ServerIdentifier");
                OnServerIdentifierChanged();
            }
        }
        private global::System.String _ServerIdentifier;
        partial void OnServerIdentifierChanging(global::System.String value);
        partial void OnServerIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ServerUrl
        {
            get
            {
                return _ServerUrl;
            }
            set
            {
                OnServerUrlChanging(value);
                ReportPropertyChanging("ServerUrl");
                _ServerUrl = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ServerUrl");
                OnServerUrlChanged();
            }
        }
        private global::System.String _ServerUrl;
        partial void OnServerUrlChanging(global::System.String value);
        partial void OnServerUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SourceIdentifier
        {
            get
            {
                return _SourceIdentifier;
            }
            set
            {
                OnSourceIdentifierChanging(value);
                ReportPropertyChanging("SourceIdentifier");
                _SourceIdentifier = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SourceIdentifier");
                OnSourceIdentifierChanged();
            }
        }
        private global::System.String _SourceIdentifier;
        partial void OnSourceIdentifierChanging(global::System.String value);
        partial void OnSourceIdentifierChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String NativeId
        {
            get
            {
                return _NativeId;
            }
            set
            {
                OnNativeIdChanging(value);
                ReportPropertyChanging("NativeId");
                _NativeId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("NativeId");
                OnNativeIdChanged();
            }
        }
        private global::System.String _NativeId;
        partial void OnNativeIdChanging(global::System.String value);
        partial void OnNativeIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts4", "CONFLICT_CONFLICTS")]
        public EntityCollection<RTConflict> ConflictsAsSourceSide
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts4", "CONFLICT_CONFLICTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts4", "CONFLICT_CONFLICTS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_MigrationSourceConfigs", "MIGRATION_SOURCE_CONFIGS")]
        public EntityCollection<RTMigrationSourceConfig> Configs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_MigrationSourceConfigs", "MIGRATION_SOURCE_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_MigrationSourceConfigs", "MIGRATION_SOURCE_CONFIGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_MigrationSources1", "PROVIDERS")]
        public RTProvider Provider
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_MigrationSources1", "PROVIDERS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_MigrationSources1", "PROVIDERS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTProvider> ProviderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_MigrationSources1", "PROVIDERS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_MigrationSources1", "PROVIDERS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeGroups1", "RUNTIME_CHANGE_GROUPS")]
        public EntityCollection<RTChangeGroup> ChangeGroupsAsSourceSide
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups1", "RUNTIME_CHANGE_GROUPS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups1", "RUNTIME_CHANGE_GROUPS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_MigrationItems", "RUNTIME_MIGRATION_ITEMS")]
        public EntityCollection<RTMigrationItem> Items
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_MigrationItems", "RUNTIME_MIGRATION_ITEMS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTMigrationItem>("TfsMigrationRuntimeEntityModel.FK_RT_MigrationItems", "RUNTIME_MIGRATION_ITEMS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions1", "RUNTIME_SESSIONS")]
        public EntityCollection<RTSession> SessionsAsLeftSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSession>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions1", "RUNTIME_SESSIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSession>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions1", "RUNTIME_SESSIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions2", "RUNTIME_SESSIONS")]
        public EntityCollection<RTSession> SessionsAsRightSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSession>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions2", "RUNTIME_SESSIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSession>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions2", "RUNTIME_SESSIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_MigrationSource", "RTConversionHistory")]
        public EntityCollection<RTConversionHistory> ConversionHistory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_MigrationSource", "RTConversionHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_MigrationSource", "RTConversionHistory", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "LATENCY_POLL_FK_MigrationSource_fkey", "LATENCY_POLL")]
        public EntityCollection<RTLatencyPoll> LATENCY_POLL
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTLatencyPoll>("TfsMigrationRuntimeEntityModel.LATENCY_POLL_FK_MigrationSource_fkey", "LATENCY_POLL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTLatencyPoll>("TfsMigrationRuntimeEntityModel.LATENCY_POLL_FK_MigrationSource_fkey", "LATENCY_POLL", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RelatedRecord_to_MigrationSource", "RELATED_ARTIFACTS_RECORDS")]
        public EntityCollection<RTRelatedArtifactsRecords> RELATED_ARTIFACTS_RECORDS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTRelatedArtifactsRecords>("TfsMigrationRuntimeEntityModel.FK_RelatedRecord_to_MigrationSource", "RELATED_ARTIFACTS_RECORDS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTRelatedArtifactsRecords>("TfsMigrationRuntimeEntityModel.FK_RelatedRecord_to_MigrationSource", "RELATED_ARTIFACTS_RECORDS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTMigrationSourceConfig")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTMigrationSourceConfig : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTMigrationSourceConfig object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="creationTime">Initial value of the CreationTime property.</param>
        public static RTMigrationSourceConfig CreateRTMigrationSourceConfig(global::System.Int32 id, global::System.DateTime creationTime)
        {
            RTMigrationSourceConfig rTMigrationSourceConfig = new RTMigrationSourceConfig();
            rTMigrationSourceConfig.Id = id;
            rTMigrationSourceConfig.CreationTime = creationTime;
            return rTMigrationSourceConfig;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private global::System.DateTime _CreationTime;
        partial void OnCreationTimeChanging(global::System.DateTime value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SettingXml
        {
            get
            {
                return _SettingXml;
            }
            set
            {
                OnSettingXmlChanging(value);
                ReportPropertyChanging("SettingXml");
                _SettingXml = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SettingXml");
                OnSettingXmlChanged();
            }
        }
        private global::System.String _SettingXml;
        partial void OnSettingXmlChanging(global::System.String value);
        partial void OnSettingXmlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SettingXmlSchema
        {
            get
            {
                return _SettingXmlSchema;
            }
            set
            {
                OnSettingXmlSchemaChanging(value);
                ReportPropertyChanging("SettingXmlSchema");
                _SettingXmlSchema = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SettingXmlSchema");
                OnSettingXmlSchemaChanged();
            }
        }
        private global::System.String _SettingXmlSchema;
        partial void OnSettingXmlSchemaChanging(global::System.String value);
        partial void OnSettingXmlSchemaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GeneralSettingXml
        {
            get
            {
                return _GeneralSettingXml;
            }
            set
            {
                OnGeneralSettingXmlChanging(value);
                ReportPropertyChanging("GeneralSettingXml");
                _GeneralSettingXml = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GeneralSettingXml");
                OnGeneralSettingXmlChanged();
            }
        }
        private global::System.String _GeneralSettingXml;
        partial void OnGeneralSettingXmlChanging(global::System.String value);
        partial void OnGeneralSettingXmlChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_MigrationSourceConfigs", "MIGRATION_SOURCES")]
        public RTMigrationSource MigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_MigrationSourceConfigs", "MIGRATION_SOURCES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_MigrationSourceConfigs", "MIGRATION_SOURCES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> MigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_MigrationSourceConfigs", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_MigrationSourceConfigs", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfigurations2", "SESSION_CONFIGURATIONS")]
        public EntityCollection<RTSessionConfig> SessionConfigsAsLeft
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations2", "SESSION_CONFIGURATIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations2", "SESSION_CONFIGURATIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfigurations3", "SESSION_CONFIGURATIONS")]
        public EntityCollection<RTSessionConfig> SessionConfigsAsRight
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations3", "SESSION_CONFIGURATIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations3", "SESSION_CONFIGURATIONS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTOrchestrationCommand")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTOrchestrationCommand : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTOrchestrationCommand object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="command">Initial value of the Command property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        public static RTOrchestrationCommand CreateRTOrchestrationCommand(global::System.Int32 id, global::System.Int32 command, global::System.Int32 status)
        {
            RTOrchestrationCommand rTOrchestrationCommand = new RTOrchestrationCommand();
            rTOrchestrationCommand.Id = id;
            rTOrchestrationCommand.Command = command;
            rTOrchestrationCommand.Status = status;
            return rTOrchestrationCommand;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Command
        {
            get
            {
                return _Command;
            }
            set
            {
                OnCommandChanging(value);
                ReportPropertyChanging("Command");
                _Command = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Command");
                OnCommandChanged();
            }
        }
        private global::System.Int32 _Command;
        partial void OnCommandChanging(global::System.Int32 value);
        partial void OnCommandChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_OrchCmd_to_SessionGroup", "RTSessionGroup")]
        public RTSessionGroup SessionGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_OrchCmd_to_SessionGroup", "RTSessionGroup").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_OrchCmd_to_SessionGroup", "RTSessionGroup").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroup> SessionGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_OrchCmd_to_SessionGroup", "RTSessionGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_OrchCmd_to_SessionGroup", "RTSessionGroup", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTProvider")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTProvider : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTProvider object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        public static RTProvider CreateRTProvider(global::System.Int32 id, global::System.Guid referenceName, global::System.String friendlyName)
        {
            RTProvider rTProvider = new RTProvider();
            rTProvider.Id = id;
            rTProvider.ReferenceName = referenceName;
            rTProvider.FriendlyName = friendlyName;
            return rTProvider;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.Guid _ReferenceName;
        partial void OnReferenceNameChanging(global::System.Guid value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProviderVersion
        {
            get
            {
                return _ProviderVersion;
            }
            set
            {
                OnProviderVersionChanging(value);
                ReportPropertyChanging("ProviderVersion");
                _ProviderVersion = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProviderVersion");
                OnProviderVersionChanged();
            }
        }
        private global::System.String _ProviderVersion;
        partial void OnProviderVersionChanging(global::System.String value);
        partial void OnProviderVersionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_MigrationSources1", "MIGRATION_SOURCES")]
        public EntityCollection<RTMigrationSource> MigrationSources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_MigrationSources1", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_MigrationSources1", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_to_provider", "RTConflictType")]
        public EntityCollection<RTConflictType> RegisteredConflictTypes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_to_provider", "RTConflictType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_to_provider", "RTConflictType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_action_to_provider", "RTResolutionAction")]
        public EntityCollection<RTResolutionAction> RegisteredConflictResolutionActions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTResolutionAction>("TfsMigrationRuntimeEntityModel.FK_action_to_provider", "RTResolutionAction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTResolutionAction>("TfsMigrationRuntimeEntityModel.FK_action_to_provider", "RTResolutionAction", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTRegisteredAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTRegisteredAction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTRegisteredAction object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        public static RTRegisteredAction CreateRTRegisteredAction(global::System.Int32 id, global::System.Guid referenceName, global::System.String friendlyName)
        {
            RTRegisteredAction rTRegisteredAction = new RTRegisteredAction();
            rTRegisteredAction.Id = id;
            rTRegisteredAction.ReferenceName = referenceName;
            rTRegisteredAction.FriendlyName = friendlyName;
            return rTRegisteredAction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.Guid _ReferenceName;
        partial void OnReferenceNameChanging(global::System.Guid value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTRelatedArtifactsRecords")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTRelatedArtifactsRecords : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTRelatedArtifactsRecords object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="itemId">Initial value of the ItemId property.</param>
        /// <param name="relationship">Initial value of the Relationship property.</param>
        /// <param name="relatedArtifactId">Initial value of the RelatedArtifactId property.</param>
        /// <param name="relationshipExistsOnServer">Initial value of the RelationshipExistsOnServer property.</param>
        public static RTRelatedArtifactsRecords CreateRTRelatedArtifactsRecords(global::System.Int64 id, global::System.String itemId, global::System.String relationship, global::System.String relatedArtifactId, global::System.Boolean relationshipExistsOnServer)
        {
            RTRelatedArtifactsRecords rTRelatedArtifactsRecords = new RTRelatedArtifactsRecords();
            rTRelatedArtifactsRecords.Id = id;
            rTRelatedArtifactsRecords.ItemId = itemId;
            rTRelatedArtifactsRecords.Relationship = relationship;
            rTRelatedArtifactsRecords.RelatedArtifactId = relatedArtifactId;
            rTRelatedArtifactsRecords.RelationshipExistsOnServer = relationshipExistsOnServer;
            return rTRelatedArtifactsRecords;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ItemId
        {
            get
            {
                return _ItemId;
            }
            set
            {
                OnItemIdChanging(value);
                ReportPropertyChanging("ItemId");
                _ItemId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ItemId");
                OnItemIdChanged();
            }
        }
        private global::System.String _ItemId;
        partial void OnItemIdChanging(global::System.String value);
        partial void OnItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Relationship
        {
            get
            {
                return _Relationship;
            }
            set
            {
                OnRelationshipChanging(value);
                ReportPropertyChanging("Relationship");
                _Relationship = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Relationship");
                OnRelationshipChanged();
            }
        }
        private global::System.String _Relationship;
        partial void OnRelationshipChanging(global::System.String value);
        partial void OnRelationshipChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RelatedArtifactId
        {
            get
            {
                return _RelatedArtifactId;
            }
            set
            {
                OnRelatedArtifactIdChanging(value);
                ReportPropertyChanging("RelatedArtifactId");
                _RelatedArtifactId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RelatedArtifactId");
                OnRelatedArtifactIdChanged();
            }
        }
        private global::System.String _RelatedArtifactId;
        partial void OnRelatedArtifactIdChanging(global::System.String value);
        partial void OnRelatedArtifactIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean RelationshipExistsOnServer
        {
            get
            {
                return _RelationshipExistsOnServer;
            }
            set
            {
                OnRelationshipExistsOnServerChanging(value);
                ReportPropertyChanging("RelationshipExistsOnServer");
                _RelationshipExistsOnServer = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RelationshipExistsOnServer");
                OnRelationshipExistsOnServerChanged();
            }
        }
        private global::System.Boolean _RelationshipExistsOnServer;
        partial void OnRelationshipExistsOnServerChanging(global::System.Boolean value);
        partial void OnRelationshipExistsOnServerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OtherProperty
        {
            get
            {
                return _OtherProperty;
            }
            set
            {
                OnOtherPropertyChanging(value);
                ReportPropertyChanging("OtherProperty");
                _OtherProperty = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OtherProperty");
                OnOtherPropertyChanged();
            }
        }
        private Nullable<global::System.Int32> _OtherProperty;
        partial void OnOtherPropertyChanging(Nullable<global::System.Int32> value);
        partial void OnOtherPropertyChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RelatedRecord_to_MigrationSource", "RTMigrationSource")]
        public RTMigrationSource MigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RelatedRecord_to_MigrationSource", "RTMigrationSource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RelatedRecord_to_MigrationSource", "RTMigrationSource").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> MigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RelatedRecord_to_MigrationSource", "RTMigrationSource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RelatedRecord_to_MigrationSource", "RTMigrationSource", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTResolutionAction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTResolutionAction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTResolutionAction object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        public static RTResolutionAction CreateRTResolutionAction(global::System.Int32 id, global::System.Guid referenceName, global::System.String friendlyName)
        {
            RTResolutionAction rTResolutionAction = new RTResolutionAction();
            rTResolutionAction.Id = id;
            rTResolutionAction.ReferenceName = referenceName;
            rTResolutionAction.FriendlyName = friendlyName;
            return rTResolutionAction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.Guid _ReferenceName;
        partial void OnReferenceNameChanging(global::System.Guid value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsActive;
        partial void OnIsActiveChanging(Nullable<global::System.Boolean> value);
        partial void OnIsActiveChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRule_to_ResolutionAction", "RTResolutionRule")]
        public EntityCollection<RTResolutionRule> ResolutionRules
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_ResolutionRule_to_ResolutionAction", "RTResolutionRule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTResolutionRule>("TfsMigrationRuntimeEntityModel.FK_ResolutionRule_to_ResolutionAction", "RTResolutionRule", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_action_to_provider", "RTProvider")]
        public RTProvider Provider
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_action_to_provider", "RTProvider").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_action_to_provider", "RTProvider").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTProvider> ProviderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_action_to_provider", "RTProvider");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTProvider>("TfsMigrationRuntimeEntityModel.FK_action_to_provider", "RTProvider", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTResolutionRule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTResolutionRule : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTResolutionRule object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="ruleData">Initial value of the RuleData property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="referenceName">Initial value of the ReferenceName property.</param>
        /// <param name="scopeInfoUniqueId">Initial value of the ScopeInfoUniqueId property.</param>
        /// <param name="sourceInfoUniqueId">Initial value of the SourceInfoUniqueId property.</param>
        /// <param name="creationTime">Initial value of the CreationTime property.</param>
        public static RTResolutionRule CreateRTResolutionRule(global::System.Int32 id, global::System.String ruleData, global::System.Int32 status, global::System.Guid referenceName, global::System.Guid scopeInfoUniqueId, global::System.Guid sourceInfoUniqueId, global::System.DateTime creationTime)
        {
            RTResolutionRule rTResolutionRule = new RTResolutionRule();
            rTResolutionRule.Id = id;
            rTResolutionRule.RuleData = ruleData;
            rTResolutionRule.Status = status;
            rTResolutionRule.ReferenceName = referenceName;
            rTResolutionRule.ScopeInfoUniqueId = scopeInfoUniqueId;
            rTResolutionRule.SourceInfoUniqueId = sourceInfoUniqueId;
            rTResolutionRule.CreationTime = creationTime;
            return rTResolutionRule;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RuleData
        {
            get
            {
                return _RuleData;
            }
            set
            {
                OnRuleDataChanging(value);
                ReportPropertyChanging("RuleData");
                _RuleData = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RuleData");
                OnRuleDataChanged();
            }
        }
        private global::System.String _RuleData;
        partial void OnRuleDataChanging(global::System.String value);
        partial void OnRuleDataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ReferenceName
        {
            get
            {
                return _ReferenceName;
            }
            set
            {
                OnReferenceNameChanging(value);
                ReportPropertyChanging("ReferenceName");
                _ReferenceName = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReferenceName");
                OnReferenceNameChanged();
            }
        }
        private global::System.Guid _ReferenceName;
        partial void OnReferenceNameChanging(global::System.Guid value);
        partial void OnReferenceNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ScopeInfoUniqueId
        {
            get
            {
                return _ScopeInfoUniqueId;
            }
            set
            {
                OnScopeInfoUniqueIdChanging(value);
                ReportPropertyChanging("ScopeInfoUniqueId");
                _ScopeInfoUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ScopeInfoUniqueId");
                OnScopeInfoUniqueIdChanged();
            }
        }
        private global::System.Guid _ScopeInfoUniqueId;
        partial void OnScopeInfoUniqueIdChanging(global::System.Guid value);
        partial void OnScopeInfoUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceInfoUniqueId
        {
            get
            {
                return _SourceInfoUniqueId;
            }
            set
            {
                OnSourceInfoUniqueIdChanging(value);
                ReportPropertyChanging("SourceInfoUniqueId");
                _SourceInfoUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceInfoUniqueId");
                OnSourceInfoUniqueIdChanged();
            }
        }
        private global::System.Guid _SourceInfoUniqueId;
        partial void OnSourceInfoUniqueIdChanging(global::System.Guid value);
        partial void OnSourceInfoUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private global::System.DateTime _CreationTime;
        partial void OnCreationTimeChanging(global::System.DateTime value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeprecationTime
        {
            get
            {
                return _DeprecationTime;
            }
            set
            {
                OnDeprecationTimeChanging(value);
                ReportPropertyChanging("DeprecationTime");
                _DeprecationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeprecationTime");
                OnDeprecationTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeprecationTime;
        partial void OnDeprecationTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnDeprecationTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_Conflicts6", "CONFLICT_CONFLICTS")]
        public EntityCollection<RTConflict> ResolvedConflicts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts6", "CONFLICT_CONFLICTS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConflict>("TfsMigrationRuntimeEntityModel.FK_Conflicts6", "CONFLICT_CONFLICTS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRules1", "CONFLICT_RULE_SCOPES")]
        public RTConflictRuleScope Scope
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictRuleScope>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules1", "CONFLICT_RULE_SCOPES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictRuleScope>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules1", "CONFLICT_RULE_SCOPES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflictRuleScope> ScopeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictRuleScope>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules1", "CONFLICT_RULE_SCOPES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflictRuleScope>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules1", "CONFLICT_RULE_SCOPES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRules21", "RTConflictType")]
        public RTConflictType ConflictType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules21", "RTConflictType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules21", "RTConflictType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflictType> ConflictTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules21", "RTConflictType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflictType>("TfsMigrationRuntimeEntityModel.FK_ResolutionRules21", "RTConflictType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ResolutionRule_to_ResolutionAction", "CONFLICT_RESOLUTION_ACTIONS")]
        public RTResolutionAction ResolutionAction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTResolutionAction>("TfsMigrationRuntimeEntityModel.FK_ResolutionRule_to_ResolutionAction", "CONFLICT_RESOLUTION_ACTIONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTResolutionAction>("TfsMigrationRuntimeEntityModel.FK_ResolutionRule_to_ResolutionAction", "CONFLICT_RESOLUTION_ACTIONS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTResolutionAction> ResolutionActionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTResolutionAction>("TfsMigrationRuntimeEntityModel.FK_ResolutionRule_to_ResolutionAction", "CONFLICT_RESOLUTION_ACTIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTResolutionAction>("TfsMigrationRuntimeEntityModel.FK_ResolutionRule_to_ResolutionAction", "CONFLICT_RESOLUTION_ACTIONS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTServerDiffResult")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTServerDiffResult : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTServerDiffResult object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="diffType">Initial value of the DiffType property.</param>
        /// <param name="diffTime">Initial value of the DiffTime property.</param>
        /// <param name="durationOfDiff">Initial value of the DurationOfDiff property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="allContentsMatch">Initial value of the AllContentsMatch property.</param>
        /// <param name="options">Initial value of the Options property.</param>
        public static RTServerDiffResult CreateRTServerDiffResult(global::System.Int64 id, global::System.String diffType, global::System.DateTime diffTime, global::System.Int32 durationOfDiff, global::System.Guid sessionUniqueId, global::System.Boolean allContentsMatch, global::System.String options)
        {
            RTServerDiffResult rTServerDiffResult = new RTServerDiffResult();
            rTServerDiffResult.Id = id;
            rTServerDiffResult.DiffType = diffType;
            rTServerDiffResult.DiffTime = diffTime;
            rTServerDiffResult.DurationOfDiff = durationOfDiff;
            rTServerDiffResult.SessionUniqueId = sessionUniqueId;
            rTServerDiffResult.AllContentsMatch = allContentsMatch;
            rTServerDiffResult.Options = options;
            return rTServerDiffResult;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DiffType
        {
            get
            {
                return _DiffType;
            }
            set
            {
                OnDiffTypeChanging(value);
                ReportPropertyChanging("DiffType");
                _DiffType = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DiffType");
                OnDiffTypeChanged();
            }
        }
        private global::System.String _DiffType;
        partial void OnDiffTypeChanging(global::System.String value);
        partial void OnDiffTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DiffTime
        {
            get
            {
                return _DiffTime;
            }
            set
            {
                OnDiffTimeChanging(value);
                ReportPropertyChanging("DiffTime");
                _DiffTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiffTime");
                OnDiffTimeChanged();
            }
        }
        private global::System.DateTime _DiffTime;
        partial void OnDiffTimeChanging(global::System.DateTime value);
        partial void OnDiffTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DurationOfDiff
        {
            get
            {
                return _DurationOfDiff;
            }
            set
            {
                OnDurationOfDiffChanging(value);
                ReportPropertyChanging("DurationOfDiff");
                _DurationOfDiff = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DurationOfDiff");
                OnDurationOfDiffChanged();
            }
        }
        private global::System.Int32 _DurationOfDiff;
        partial void OnDurationOfDiffChanging(global::System.Int32 value);
        partial void OnDurationOfDiffChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AllContentsMatch
        {
            get
            {
                return _AllContentsMatch;
            }
            set
            {
                OnAllContentsMatchChanging(value);
                ReportPropertyChanging("AllContentsMatch");
                _AllContentsMatch = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AllContentsMatch");
                OnAllContentsMatchChanged();
            }
        }
        private global::System.Boolean _AllContentsMatch;
        partial void OnAllContentsMatchChanging(global::System.Boolean value);
        partial void OnAllContentsMatchChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Options
        {
            get
            {
                return _Options;
            }
            set
            {
                OnOptionsChanging(value);
                ReportPropertyChanging("Options");
                _Options = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Options");
                OnOptionsChanged();
            }
        }
        private global::System.String _Options;
        partial void OnOptionsChanging(global::System.String value);
        partial void OnOptionsChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT_DETAIL")]
        public EntityCollection<RTServerDiffResultDetail> ServerDiffResultDetail
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTServerDiffResultDetail>("TfsMigrationRuntimeEntityModel.FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT_DETAIL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTServerDiffResultDetail>("TfsMigrationRuntimeEntityModel.FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT_DETAIL", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTServerDiffResultDetail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTServerDiffResultDetail : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTServerDiffResultDetail object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="diffDescription">Initial value of the DiffDescription property.</param>
        public static RTServerDiffResultDetail CreateRTServerDiffResultDetail(global::System.Int64 id, global::System.String diffDescription)
        {
            RTServerDiffResultDetail rTServerDiffResultDetail = new RTServerDiffResultDetail();
            rTServerDiffResultDetail.Id = id;
            rTServerDiffResultDetail.DiffDescription = diffDescription;
            return rTServerDiffResultDetail;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DiffDescription
        {
            get
            {
                return _DiffDescription;
            }
            set
            {
                OnDiffDescriptionChanging(value);
                ReportPropertyChanging("DiffDescription");
                _DiffDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DiffDescription");
                OnDiffDescriptionChanged();
            }
        }
        private global::System.String _DiffDescription;
        partial void OnDiffDescriptionChanging(global::System.String value);
        partial void OnDiffDescriptionChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT")]
        public RTServerDiffResult ServerDiffResult
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTServerDiffResult>("TfsMigrationRuntimeEntityModel.FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTServerDiffResult>("TfsMigrationRuntimeEntityModel.FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTServerDiffResult> ServerDiffResultReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTServerDiffResult>("TfsMigrationRuntimeEntityModel.FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTServerDiffResult>("TfsMigrationRuntimeEntityModel.FK_SERVER_DIFF_RESULT_FK_SERVER_DIFF_RESULT_fkey", "SERVER_DIFF_RESULT", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSession")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSession : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSession object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        public static RTSession CreateRTSession(global::System.Int32 id, global::System.Guid sessionUniqueId)
        {
            RTSession rTSession = new RTSession();
            rTSession.Id = id;
            rTSession.SessionUniqueId = sessionUniqueId;
            return rTSession;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LeftHighWaterMarkLatest
        {
            get
            {
                return _LeftHighWaterMarkLatest;
            }
            set
            {
                OnLeftHighWaterMarkLatestChanging(value);
                ReportPropertyChanging("LeftHighWaterMarkLatest");
                _LeftHighWaterMarkLatest = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LeftHighWaterMarkLatest");
                OnLeftHighWaterMarkLatestChanged();
            }
        }
        private Nullable<global::System.Int32> _LeftHighWaterMarkLatest;
        partial void OnLeftHighWaterMarkLatestChanging(Nullable<global::System.Int32> value);
        partial void OnLeftHighWaterMarkLatestChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RightHighWaterMarkLatest
        {
            get
            {
                return _RightHighWaterMarkLatest;
            }
            set
            {
                OnRightHighWaterMarkLatestChanging(value);
                ReportPropertyChanging("RightHighWaterMarkLatest");
                _RightHighWaterMarkLatest = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RightHighWaterMarkLatest");
                OnRightHighWaterMarkLatestChanged();
            }
        }
        private Nullable<global::System.Int32> _RightHighWaterMarkLatest;
        partial void OnRightHighWaterMarkLatestChanging(Nullable<global::System.Int32> value);
        partial void OnRightHighWaterMarkLatestChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LeftHighWaterMarkCurrent
        {
            get
            {
                return _LeftHighWaterMarkCurrent;
            }
            set
            {
                OnLeftHighWaterMarkCurrentChanging(value);
                ReportPropertyChanging("LeftHighWaterMarkCurrent");
                _LeftHighWaterMarkCurrent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LeftHighWaterMarkCurrent");
                OnLeftHighWaterMarkCurrentChanged();
            }
        }
        private Nullable<global::System.Int32> _LeftHighWaterMarkCurrent;
        partial void OnLeftHighWaterMarkCurrentChanging(Nullable<global::System.Int32> value);
        partial void OnLeftHighWaterMarkCurrentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RightHighWaterMarkCurrent
        {
            get
            {
                return _RightHighWaterMarkCurrent;
            }
            set
            {
                OnRightHighWaterMarkCurrentChanging(value);
                ReportPropertyChanging("RightHighWaterMarkCurrent");
                _RightHighWaterMarkCurrent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RightHighWaterMarkCurrent");
                OnRightHighWaterMarkCurrentChanged();
            }
        }
        private Nullable<global::System.Int32> _RightHighWaterMarkCurrent;
        partial void OnRightHighWaterMarkCurrentChanging(Nullable<global::System.Int32> value);
        partial void OnRightHighWaterMarkCurrentChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ExecOrderInSessionGroup
        {
            get
            {
                return _ExecOrderInSessionGroup;
            }
            set
            {
                OnExecOrderInSessionGroupChanging(value);
                ReportPropertyChanging("ExecOrderInSessionGroup");
                _ExecOrderInSessionGroup = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExecOrderInSessionGroup");
                OnExecOrderInSessionGroupChanged();
            }
        }
        private Nullable<global::System.Int32> _ExecOrderInSessionGroup;
        partial void OnExecOrderInSessionGroupChanging(Nullable<global::System.Int32> value);
        partial void OnExecOrderInSessionGroupChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private Nullable<global::System.Int32> _State;
        partial void OnStateChanging(Nullable<global::System.Int32> value);
        partial void OnStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OrchestrationStatus
        {
            get
            {
                return _OrchestrationStatus;
            }
            set
            {
                OnOrchestrationStatusChanging(value);
                ReportPropertyChanging("OrchestrationStatus");
                _OrchestrationStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrchestrationStatus");
                OnOrchestrationStatusChanged();
            }
        }
        private Nullable<global::System.Int32> _OrchestrationStatus;
        partial void OnOrchestrationStatusChanging(Nullable<global::System.Int32> value);
        partial void OnOrchestrationStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions1", "MIGRATION_SOURCES")]
        public RTMigrationSource LeftMigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions1", "MIGRATION_SOURCES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions1", "MIGRATION_SOURCES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> LeftMigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions1", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions1", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions2", "MIGRATION_SOURCES")]
        public RTMigrationSource RightMigrationSource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions2", "MIGRATION_SOURCES").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions2", "MIGRATION_SOURCES").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSource> RightMigrationSourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions2", "MIGRATION_SOURCES");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSource>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions2", "MIGRATION_SOURCES", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions3", "SESSION_GROUPS")]
        public RTSessionGroup SessionGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions3", "SESSION_GROUPS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions3", "SESSION_GROUPS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroup> SessionGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions3", "SESSION_GROUPS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions3", "SESSION_GROUPS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSessionConfig")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSessionConfig : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSessionConfig object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        /// <param name="creationTime">Initial value of the CreationTime property.</param>
        /// <param name="type">Initial value of the Type property.</param>
        public static RTSessionConfig CreateRTSessionConfig(global::System.Int32 id, global::System.Guid sessionUniqueId, global::System.String friendlyName, global::System.DateTime creationTime, global::System.Int32 type)
        {
            RTSessionConfig rTSessionConfig = new RTSessionConfig();
            rTSessionConfig.Id = id;
            rTSessionConfig.SessionUniqueId = sessionUniqueId;
            rTSessionConfig.FriendlyName = friendlyName;
            rTSessionConfig.CreationTime = creationTime;
            rTSessionConfig.Type = type;
            return rTSessionConfig;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private global::System.DateTime _CreationTime;
        partial void OnCreationTimeChanging(global::System.DateTime value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Creator
        {
            get
            {
                return _Creator;
            }
            set
            {
                OnCreatorChanging(value);
                ReportPropertyChanging("Creator");
                _Creator = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Creator");
                OnCreatorChanged();
            }
        }
        private global::System.String _Creator;
        partial void OnCreatorChanging(global::System.String value);
        partial void OnCreatorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeprecationTime
        {
            get
            {
                return _DeprecationTime;
            }
            set
            {
                OnDeprecationTimeChanging(value);
                ReportPropertyChanging("DeprecationTime");
                _DeprecationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeprecationTime");
                OnDeprecationTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeprecationTime;
        partial void OnDeprecationTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnDeprecationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.Int32 _Type;
        partial void OnTypeChanging(global::System.Int32 value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SettingXml
        {
            get
            {
                return _SettingXml;
            }
            set
            {
                OnSettingXmlChanging(value);
                ReportPropertyChanging("SettingXml");
                _SettingXml = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SettingXml");
                OnSettingXmlChanged();
            }
        }
        private global::System.String _SettingXml;
        partial void OnSettingXmlChanging(global::System.String value);
        partial void OnSettingXmlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SettingXmlSchema
        {
            get
            {
                return _SettingXmlSchema;
            }
            set
            {
                OnSettingXmlSchemaChanging(value);
                ReportPropertyChanging("SettingXmlSchema");
                _SettingXmlSchema = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SettingXmlSchema");
                OnSettingXmlSchemaChanged();
            }
        }
        private global::System.String _SettingXmlSchema;
        partial void OnSettingXmlSchemaChanging(global::System.String value);
        partial void OnSettingXmlSchemaChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfigurations2", "MIGRATION_SOURCE_CONFIGS")]
        public RTMigrationSourceConfig LeftSourceConfig
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations2", "MIGRATION_SOURCE_CONFIGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations2", "MIGRATION_SOURCE_CONFIGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSourceConfig> LeftSourceConfigReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations2", "MIGRATION_SOURCE_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations2", "MIGRATION_SOURCE_CONFIGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfigurations3", "MIGRATION_SOURCE_CONFIGS")]
        public RTMigrationSourceConfig RightSourceConfig
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations3", "MIGRATION_SOURCE_CONFIGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations3", "MIGRATION_SOURCE_CONFIGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMigrationSourceConfig> RightSourceConfigReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations3", "MIGRATION_SOURCE_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMigrationSourceConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfigurations3", "MIGRATION_SOURCE_CONFIGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionRuns1", "RUNTIME_SESSION_RUNS")]
        public EntityCollection<RTSessionRun> Runs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns1", "RUNTIME_SESSION_RUNS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns1", "RUNTIME_SESSION_RUNS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfiguration5", "SESSION_GROUP_CONFIGS")]
        public RTSessionGroupConfig SessionGroupConfig
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfiguration5", "SESSION_GROUP_CONFIGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfiguration5", "SESSION_GROUP_CONFIGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroupConfig> SessionGroupConfigReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfiguration5", "SESSION_GROUP_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfiguration5", "SESSION_GROUP_CONFIGS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSessionGroup")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSessionGroup : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSessionGroup object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="groupUniqueId">Initial value of the GroupUniqueId property.</param>
        /// <param name="friendlyName">Initial value of the FriendlyName property.</param>
        public static RTSessionGroup CreateRTSessionGroup(global::System.Int32 id, global::System.Guid groupUniqueId, global::System.String friendlyName)
        {
            RTSessionGroup rTSessionGroup = new RTSessionGroup();
            rTSessionGroup.Id = id;
            rTSessionGroup.GroupUniqueId = groupUniqueId;
            rTSessionGroup.FriendlyName = friendlyName;
            return rTSessionGroup;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GroupUniqueId
        {
            get
            {
                return _GroupUniqueId;
            }
            set
            {
                OnGroupUniqueIdChanging(value);
                ReportPropertyChanging("GroupUniqueId");
                _GroupUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GroupUniqueId");
                OnGroupUniqueIdChanged();
            }
        }
        private global::System.Guid _GroupUniqueId;
        partial void OnGroupUniqueIdChanging(global::System.Guid value);
        partial void OnGroupUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private Nullable<global::System.Int32> _State;
        partial void OnStateChanging(Nullable<global::System.Int32> value);
        partial void OnStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OrchestrationStatus
        {
            get
            {
                return _OrchestrationStatus;
            }
            set
            {
                OnOrchestrationStatusChanging(value);
                ReportPropertyChanging("OrchestrationStatus");
                _OrchestrationStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrchestrationStatus");
                OnOrchestrationStatusChanged();
            }
        }
        private Nullable<global::System.Int32> _OrchestrationStatus;
        partial void OnOrchestrationStatusChanging(Nullable<global::System.Int32> value);
        partial void OnOrchestrationStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_Sessions3", "RUNTIME_SESSIONS")]
        public EntityCollection<RTSession> Sessions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSession>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions3", "RUNTIME_SESSIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSession>("TfsMigrationRuntimeEntityModel.FK_RT_Sessions3", "RUNTIME_SESSIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupConfigs1", "SESSION_GROUP_CONFIGS")]
        public EntityCollection<RTSessionGroupConfig> Configurations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs1", "SESSION_GROUP_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs1", "SESSION_GROUP_CONFIGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_OrchCmd_to_SessionGroup", "RUNTIME_ORCHESTRATION_COMMAND")]
        public EntityCollection<RTOrchestrationCommand> OrchestrationCommands
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTOrchestrationCommand>("TfsMigrationRuntimeEntityModel.FK_OrchCmd_to_SessionGroup", "RUNTIME_ORCHESTRATION_COMMAND");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTOrchestrationCommand>("TfsMigrationRuntimeEntityModel.FK_OrchCmd_to_SessionGroup", "RUNTIME_ORCHESTRATION_COMMAND", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSessionGroupConfig")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSessionGroupConfig : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSessionGroupConfig object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="creationTime">Initial value of the CreationTime property.</param>
        /// <param name="status">Initial value of the Status property.</param>
        /// <param name="uniqueId">Initial value of the UniqueId property.</param>
        /// <param name="workFlowType">Initial value of the WorkFlowType property.</param>
        public static RTSessionGroupConfig CreateRTSessionGroupConfig(global::System.Int32 id, global::System.DateTime creationTime, global::System.Int32 status, global::System.Guid uniqueId, global::System.Int32 workFlowType)
        {
            RTSessionGroupConfig rTSessionGroupConfig = new RTSessionGroupConfig();
            rTSessionGroupConfig.Id = id;
            rTSessionGroupConfig.CreationTime = creationTime;
            rTSessionGroupConfig.Status = status;
            rTSessionGroupConfig.UniqueId = uniqueId;
            rTSessionGroupConfig.WorkFlowType = workFlowType;
            return rTSessionGroupConfig;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private global::System.DateTime _CreationTime;
        partial void OnCreationTimeChanging(global::System.DateTime value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Creator
        {
            get
            {
                return _Creator;
            }
            set
            {
                OnCreatorChanging(value);
                ReportPropertyChanging("Creator");
                _Creator = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Creator");
                OnCreatorChanged();
            }
        }
        private global::System.String _Creator;
        partial void OnCreatorChanging(global::System.String value);
        partial void OnCreatorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DeprecationTime
        {
            get
            {
                return _DeprecationTime;
            }
            set
            {
                OnDeprecationTimeChanging(value);
                ReportPropertyChanging("DeprecationTime");
                _DeprecationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeprecationTime");
                OnDeprecationTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _DeprecationTime;
        partial void OnDeprecationTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnDeprecationTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.Int32 _Status;
        partial void OnStatusChanging(global::System.Int32 value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FriendlyName
        {
            get
            {
                return _FriendlyName;
            }
            set
            {
                OnFriendlyNameChanging(value);
                ReportPropertyChanging("FriendlyName");
                _FriendlyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FriendlyName");
                OnFriendlyNameChanged();
            }
        }
        private global::System.String _FriendlyName;
        partial void OnFriendlyNameChanging(global::System.String value);
        partial void OnFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UniqueId
        {
            get
            {
                return _UniqueId;
            }
            set
            {
                OnUniqueIdChanging(value);
                ReportPropertyChanging("UniqueId");
                _UniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UniqueId");
                OnUniqueIdChanged();
            }
        }
        private global::System.Guid _UniqueId;
        partial void OnUniqueIdChanging(global::System.Guid value);
        partial void OnUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WorkFlowType
        {
            get
            {
                return _WorkFlowType;
            }
            set
            {
                OnWorkFlowTypeChanging(value);
                ReportPropertyChanging("WorkFlowType");
                _WorkFlowType = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WorkFlowType");
                OnWorkFlowTypeChanged();
            }
        }
        private global::System.Int32 _WorkFlowType;
        partial void OnWorkFlowTypeChanging(global::System.Int32 value);
        partial void OnWorkFlowTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserIdentityMappingsConfig
        {
            get
            {
                return _UserIdentityMappingsConfig;
            }
            set
            {
                OnUserIdentityMappingsConfigChanging(value);
                ReportPropertyChanging("UserIdentityMappingsConfig");
                _UserIdentityMappingsConfig = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserIdentityMappingsConfig");
                OnUserIdentityMappingsConfigChanged();
            }
        }
        private global::System.String _UserIdentityMappingsConfig;
        partial void OnUserIdentityMappingsConfigChanging(global::System.String value);
        partial void OnUserIdentityMappingsConfigChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ErrorManagementConfig
        {
            get
            {
                return _ErrorManagementConfig;
            }
            set
            {
                OnErrorManagementConfigChanging(value);
                ReportPropertyChanging("ErrorManagementConfig");
                _ErrorManagementConfig = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ErrorManagementConfig");
                OnErrorManagementConfigChanged();
            }
        }
        private global::System.String _ErrorManagementConfig;
        partial void OnErrorManagementConfigChanging(global::System.String value);
        partial void OnErrorManagementConfigChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AddinsConfig
        {
            get
            {
                return _AddinsConfig;
            }
            set
            {
                OnAddinsConfigChanging(value);
                ReportPropertyChanging("AddinsConfig");
                _AddinsConfig = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AddinsConfig");
                OnAddinsConfigChanged();
            }
        }
        private global::System.String _AddinsConfig;
        partial void OnAddinsConfigChanging(global::System.String value);
        partial void OnAddinsConfigChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Settings
        {
            get
            {
                return _Settings;
            }
            set
            {
                OnSettingsChanging(value);
                ReportPropertyChanging("Settings");
                _Settings = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Settings");
                OnSettingsChanged();
            }
        }
        private global::System.String _Settings;
        partial void OnSettingsChanging(global::System.String value);
        partial void OnSettingsChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupConfigs3", "LINKING_SETTINGS")]
        public RTLinkingSetting LinkingSetting
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkingSetting>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs3", "LINKING_SETTINGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkingSetting>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs3", "LINKING_SETTINGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTLinkingSetting> LinkingSettingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTLinkingSetting>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs3", "LINKING_SETTINGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTLinkingSetting>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs3", "LINKING_SETTINGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionGroupRuns1", "RUNTIME_SESSION_GROUP_RUNS")]
        public EntityCollection<RTSessionGroupRun> Runs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionGroupRuns1", "RUNTIME_SESSION_GROUP_RUNS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionGroupRuns1", "RUNTIME_SESSION_GROUP_RUNS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionConfiguration5", "SESSION_CONFIGURATIONS")]
        public EntityCollection<RTSessionConfig> SessionConfigs
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfiguration5", "SESSION_CONFIGURATIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_SessionConfiguration5", "SESSION_CONFIGURATIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupConfigs1", "SESSION_GROUPS")]
        public RTSessionGroup SessionGroup
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs1", "SESSION_GROUPS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs1", "SESSION_GROUPS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroup> SessionGroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs1", "SESSION_GROUPS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroup>("TfsMigrationRuntimeEntityModel.FK_SessionGroupConfigs1", "SESSION_GROUPS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSessionGroupRun")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSessionGroupRun : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSessionGroupRun object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="startTime">Initial value of the StartTime property.</param>
        public static RTSessionGroupRun CreateRTSessionGroupRun(global::System.Int32 id, global::System.DateTime startTime)
        {
            RTSessionGroupRun rTSessionGroupRun = new RTSessionGroupRun();
            rTSessionGroupRun.Id = id;
            rTSessionGroupRun.StartTime = startTime;
            return rTSessionGroupRun;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private global::System.DateTime _StartTime;
        partial void OnStartTimeChanging(global::System.DateTime value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> FinishTime
        {
            get
            {
                return _FinishTime;
            }
            set
            {
                OnFinishTimeChanging(value);
                ReportPropertyChanging("FinishTime");
                _FinishTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FinishTime");
                OnFinishTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _FinishTime;
        partial void OnFinishTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnFinishTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionGroupRuns1", "SESSION_GROUP_CONFIGS")]
        public RTSessionGroupConfig Config
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionGroupRuns1", "SESSION_GROUP_CONFIGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionGroupRuns1", "SESSION_GROUP_CONFIGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroupConfig> ConfigReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionGroupRuns1", "SESSION_GROUP_CONFIGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroupConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionGroupRuns1", "SESSION_GROUP_CONFIGS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionRuns2", "RUNTIME_SESSION_RUNS")]
        public EntityCollection<RTSessionRun> SessionRuns
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns2", "RUNTIME_SESSION_RUNS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTSessionRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns2", "RUNTIME_SESSION_RUNS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_PerfData_To_SessionGroupRun", "RUNTIME_GENERAL_PERFORMANCE_DATA")]
        public EntityCollection<RTGeneralPerformanceData> GeneralPerformanceData
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTGeneralPerformanceData>("TfsMigrationRuntimeEntityModel.FK_PerfData_To_SessionGroupRun", "RUNTIME_GENERAL_PERFORMANCE_DATA");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTGeneralPerformanceData>("TfsMigrationRuntimeEntityModel.FK_PerfData_To_SessionGroupRun", "RUNTIME_GENERAL_PERFORMANCE_DATA", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionGroupRun_To_ConflictCollection", "RTConflictCollection")]
        public RTConflictCollection ConflictCollection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTConflictCollection").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTConflictCollection").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflictCollection> ConflictCollectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTConflictCollection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionGroupRun_To_ConflictCollection", "RTConflictCollection", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSessionRun")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSessionRun : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSessionRun object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isPreview">Initial value of the IsPreview property.</param>
        public static RTSessionRun CreateRTSessionRun(global::System.Int32 id, global::System.Boolean isPreview)
        {
            RTSessionRun rTSessionRun = new RTSessionRun();
            rTSessionRun.Id = id;
            rTSessionRun.IsPreview = isPreview;
            return rTSessionRun;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LeftHighWaterMark
        {
            get
            {
                return _LeftHighWaterMark;
            }
            set
            {
                OnLeftHighWaterMarkChanging(value);
                ReportPropertyChanging("LeftHighWaterMark");
                _LeftHighWaterMark = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LeftHighWaterMark");
                OnLeftHighWaterMarkChanged();
            }
        }
        private global::System.String _LeftHighWaterMark;
        partial void OnLeftHighWaterMarkChanging(global::System.String value);
        partial void OnLeftHighWaterMarkChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String RightHighWaterMark
        {
            get
            {
                return _RightHighWaterMark;
            }
            set
            {
                OnRightHighWaterMarkChanging(value);
                ReportPropertyChanging("RightHighWaterMark");
                _RightHighWaterMark = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("RightHighWaterMark");
                OnRightHighWaterMarkChanged();
            }
        }
        private global::System.String _RightHighWaterMark;
        partial void OnRightHighWaterMarkChanging(global::System.String value);
        partial void OnRightHighWaterMarkChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private Nullable<global::System.Int32> _State;
        partial void OnStateChanging(Nullable<global::System.Int32> value);
        partial void OnStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsPreview
        {
            get
            {
                return _IsPreview;
            }
            set
            {
                OnIsPreviewChanging(value);
                ReportPropertyChanging("IsPreview");
                _IsPreview = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsPreview");
                OnIsPreviewChanged();
            }
        }
        private global::System.Boolean _IsPreview;
        partial void OnIsPreviewChanging(global::System.Boolean value);
        partial void OnIsPreviewChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _StartTime;
        partial void OnStartTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> FinishTime
        {
            get
            {
                return _FinishTime;
            }
            set
            {
                OnFinishTimeChanging(value);
                ReportPropertyChanging("FinishTime");
                _FinishTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FinishTime");
                OnFinishTimeChanged();
            }
        }
        private Nullable<global::System.DateTime> _FinishTime;
        partial void OnFinishTimeChanging(Nullable<global::System.DateTime> value);
        partial void OnFinishTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionRuns2", "RUNTIME_SESSION_GROUP_RUNS")]
        public RTSessionGroupRun SessionGroupRun
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns2", "RUNTIME_SESSION_GROUP_RUNS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns2", "RUNTIME_SESSION_GROUP_RUNS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionGroupRun> SessionGroupRunReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns2", "RUNTIME_SESSION_GROUP_RUNS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionGroupRun>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns2", "RUNTIME_SESSION_GROUP_RUNS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_SessionRuns1", "SESSION_CONFIGURATIONS")]
        public RTSessionConfig Config
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns1", "SESSION_CONFIGURATIONS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns1", "SESSION_CONFIGURATIONS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTSessionConfig> ConfigReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns1", "SESSION_CONFIGURATIONS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTSessionConfig>("TfsMigrationRuntimeEntityModel.FK_RT_SessionRuns1", "SESSION_CONFIGURATIONS", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_RT_ChangeGroups_to_SessionRun", "RTChangeGroup")]
        public EntityCollection<RTChangeGroup> ChangeGroups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups_to_SessionRun", "RTChangeGroup");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTChangeGroup>("TfsMigrationRuntimeEntityModel.FK_RT_ChangeGroups_to_SessionRun", "RTChangeGroup", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_SessionRun_To_ConflictCollection", "RTConflictCollection")]
        public RTConflictCollection ConflictCollection
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTConflictCollection").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTConflictCollection").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTConflictCollection> ConflictCollectionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTConflictCollection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTConflictCollection>("TfsMigrationRuntimeEntityModel.FK_SessionRun_To_ConflictCollection", "RTConflictCollection", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ConvHistory_to_SessionRun", "RTConversionHistory")]
        public EntityCollection<RTConversionHistory> ConversionHistories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_SessionRun", "RTConversionHistory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTConversionHistory>("TfsMigrationRuntimeEntityModel.FK_ConvHistory_to_SessionRun", "RTConversionHistory", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTSyncPoint")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTSyncPoint : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTSyncPoint object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sessionUniqueId">Initial value of the SessionUniqueId property.</param>
        /// <param name="sourceUniqueId">Initial value of the SourceUniqueId property.</param>
        /// <param name="sourceHighWaterMarkName">Initial value of the SourceHighWaterMarkName property.</param>
        /// <param name="lastMigratedTargetItemId">Initial value of the LastMigratedTargetItemId property.</param>
        /// <param name="lastMigratedTargetItemVersion">Initial value of the LastMigratedTargetItemVersion property.</param>
        public static RTSyncPoint CreateRTSyncPoint(global::System.Int64 id, global::System.Guid sessionUniqueId, global::System.Guid sourceUniqueId, global::System.String sourceHighWaterMarkName, global::System.String lastMigratedTargetItemId, global::System.String lastMigratedTargetItemVersion)
        {
            RTSyncPoint rTSyncPoint = new RTSyncPoint();
            rTSyncPoint.Id = id;
            rTSyncPoint.SessionUniqueId = sessionUniqueId;
            rTSyncPoint.SourceUniqueId = sourceUniqueId;
            rTSyncPoint.SourceHighWaterMarkName = sourceHighWaterMarkName;
            rTSyncPoint.LastMigratedTargetItemId = lastMigratedTargetItemId;
            rTSyncPoint.LastMigratedTargetItemVersion = lastMigratedTargetItemVersion;
            return rTSyncPoint;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SessionUniqueId
        {
            get
            {
                return _SessionUniqueId;
            }
            set
            {
                OnSessionUniqueIdChanging(value);
                ReportPropertyChanging("SessionUniqueId");
                _SessionUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SessionUniqueId");
                OnSessionUniqueIdChanged();
            }
        }
        private global::System.Guid _SessionUniqueId;
        partial void OnSessionUniqueIdChanging(global::System.Guid value);
        partial void OnSessionUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid SourceUniqueId
        {
            get
            {
                return _SourceUniqueId;
            }
            set
            {
                OnSourceUniqueIdChanging(value);
                ReportPropertyChanging("SourceUniqueId");
                _SourceUniqueId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SourceUniqueId");
                OnSourceUniqueIdChanged();
            }
        }
        private global::System.Guid _SourceUniqueId;
        partial void OnSourceUniqueIdChanging(global::System.Guid value);
        partial void OnSourceUniqueIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SourceHighWaterMarkName
        {
            get
            {
                return _SourceHighWaterMarkName;
            }
            set
            {
                OnSourceHighWaterMarkNameChanging(value);
                ReportPropertyChanging("SourceHighWaterMarkName");
                _SourceHighWaterMarkName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SourceHighWaterMarkName");
                OnSourceHighWaterMarkNameChanged();
            }
        }
        private global::System.String _SourceHighWaterMarkName;
        partial void OnSourceHighWaterMarkNameChanging(global::System.String value);
        partial void OnSourceHighWaterMarkNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SourceHighWaterMarkValue
        {
            get
            {
                return _SourceHighWaterMarkValue;
            }
            set
            {
                OnSourceHighWaterMarkValueChanging(value);
                ReportPropertyChanging("SourceHighWaterMarkValue");
                _SourceHighWaterMarkValue = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SourceHighWaterMarkValue");
                OnSourceHighWaterMarkValueChanged();
            }
        }
        private global::System.String _SourceHighWaterMarkValue;
        partial void OnSourceHighWaterMarkValueChanging(global::System.String value);
        partial void OnSourceHighWaterMarkValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastMigratedTargetItemId
        {
            get
            {
                return _LastMigratedTargetItemId;
            }
            set
            {
                OnLastMigratedTargetItemIdChanging(value);
                ReportPropertyChanging("LastMigratedTargetItemId");
                _LastMigratedTargetItemId = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastMigratedTargetItemId");
                OnLastMigratedTargetItemIdChanged();
            }
        }
        private global::System.String _LastMigratedTargetItemId;
        partial void OnLastMigratedTargetItemIdChanging(global::System.String value);
        partial void OnLastMigratedTargetItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastMigratedTargetItemVersion
        {
            get
            {
                return _LastMigratedTargetItemVersion;
            }
            set
            {
                OnLastMigratedTargetItemVersionChanging(value);
                ReportPropertyChanging("LastMigratedTargetItemVersion");
                _LastMigratedTargetItemVersion = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastMigratedTargetItemVersion");
                OnLastMigratedTargetItemVersionChanged();
            }
        }
        private global::System.String _LastMigratedTargetItemVersion;
        partial void OnLastMigratedTargetItemVersionChanging(global::System.String value);
        partial void OnLastMigratedTargetItemVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> LastChangeGroupId
        {
            get
            {
                return _LastChangeGroupId;
            }
            set
            {
                OnLastChangeGroupIdChanging(value);
                ReportPropertyChanging("LastChangeGroupId");
                _LastChangeGroupId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastChangeGroupId");
                OnLastChangeGroupIdChanged();
            }
        }
        private Nullable<global::System.Int64> _LastChangeGroupId;
        partial void OnLastChangeGroupIdChanging(Nullable<global::System.Int64> value);
        partial void OnLastChangeGroupIdChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTValueMap")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTValueMap : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTValueMap object.
        /// </summary>
        /// <param name="mappingId">Initial value of the MappingId property.</param>
        public static RTValueMap CreateRTValueMap(global::System.Int32 mappingId)
        {
            RTValueMap rTValueMap = new RTValueMap();
            rTValueMap.MappingId = mappingId;
            return rTValueMap;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MappingId
        {
            get
            {
                return _MappingId;
            }
            set
            {
                if (_MappingId != value)
                {
                    OnMappingIdChanging(value);
                    ReportPropertyChanging("MappingId");
                    _MappingId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MappingId");
                    OnMappingIdChanged();
                }
            }
        }
        private global::System.Int32 _MappingId;
        partial void OnMappingIdChanging(global::System.Int32 value);
        partial void OnMappingIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ValueMapCollection2", "FIELD_MAP_COLLECTION")]
        public RTFieldMap FieldMap
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection2", "FIELD_MAP_COLLECTION").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection2", "FIELD_MAP_COLLECTION").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTFieldMap> FieldMapReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection2", "FIELD_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection2", "FIELD_MAP_COLLECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_ValueMapCollection1", "MAPPINGS")]
        public RTMapping Mapping
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "MAPPINGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "MAPPINGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMapping> MappingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "MAPPINGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_ValueMapCollection1", "MAPPINGS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="RTWorkItemTypeMap")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RTWorkItemTypeMap : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RTWorkItemTypeMap object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static RTWorkItemTypeMap CreateRTWorkItemTypeMap(global::System.Int32 id)
        {
            RTWorkItemTypeMap rTWorkItemTypeMap = new RTWorkItemTypeMap();
            rTWorkItemTypeMap.Id = id;
            return rTWorkItemTypeMap;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldExclCollection", "FIELD_EXCLUSION_COLLECTION")]
        public EntityCollection<RTFieldExclusion> ExcludedFields
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTFieldExclusion>("TfsMigrationRuntimeEntityModel.FK_FieldExclCollection", "FIELD_EXCLUSION_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTFieldExclusion>("TfsMigrationRuntimeEntityModel.FK_FieldExclCollection", "FIELD_EXCLUSION_COLLECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_FieldMapCollection1", "FIELD_MAP_COLLECTION")]
        public EntityCollection<RTFieldMap> MappedFields
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection1", "FIELD_MAP_COLLECTION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RTFieldMap>("TfsMigrationRuntimeEntityModel.FK_FieldMapCollection1", "FIELD_MAP_COLLECTION", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TfsMigrationRuntimeEntityModel", "FK_WITypeMapCollection", "MAPPINGS")]
        public RTMapping Mappings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_WITypeMapCollection", "MAPPINGS").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_WITypeMapCollection", "MAPPINGS").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RTMapping> MappingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_WITypeMapCollection", "MAPPINGS");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RTMapping>("TfsMigrationRuntimeEntityModel.FK_WITypeMapCollection", "MAPPINGS", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TfsMigrationRuntimeEntityModel", Name="VCContentConflictResult")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VCContentConflictResult : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VCContentConflictResult object.
        /// </summary>
        /// <param name="deltaChangeActionId">Initial value of the DeltaChangeActionId property.</param>
        /// <param name="migrationInstructionChangeActionId">Initial value of the MigrationInstructionChangeActionId property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static VCContentConflictResult CreateVCContentConflictResult(global::System.Int64 deltaChangeActionId, global::System.Int64 migrationInstructionChangeActionId, global::System.Int64 id)
        {
            VCContentConflictResult vCContentConflictResult = new VCContentConflictResult();
            vCContentConflictResult.DeltaChangeActionId = deltaChangeActionId;
            vCContentConflictResult.MigrationInstructionChangeActionId = migrationInstructionChangeActionId;
            vCContentConflictResult.Id = id;
            return vCContentConflictResult;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DeltaChangeActionId
        {
            get
            {
                return _DeltaChangeActionId;
            }
            set
            {
                OnDeltaChangeActionIdChanging(value);
                ReportPropertyChanging("DeltaChangeActionId");
                _DeltaChangeActionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DeltaChangeActionId");
                OnDeltaChangeActionIdChanged();
            }
        }
        private global::System.Int64 _DeltaChangeActionId;
        partial void OnDeltaChangeActionIdChanging(global::System.Int64 value);
        partial void OnDeltaChangeActionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 MigrationInstructionChangeActionId
        {
            get
            {
                return _MigrationInstructionChangeActionId;
            }
            set
            {
                OnMigrationInstructionChangeActionIdChanging(value);
                ReportPropertyChanging("MigrationInstructionChangeActionId");
                _MigrationInstructionChangeActionId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MigrationInstructionChangeActionId");
                OnMigrationInstructionChangeActionIdChanged();
            }
        }
        private global::System.Int64 _MigrationInstructionChangeActionId;
        partial void OnMigrationInstructionChangeActionIdChanging(global::System.Int64 value);
        partial void OnMigrationInstructionChangeActionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

    
    }

    #endregion

    
}
